
stm32h750_dac_timer_sine_wave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000542c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080056c8  080056c8  000156c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080058c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c0  24000010  080058d0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001d0  080058d0  000201d0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018787  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000028b7  00000000  00000000  000387c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000db0  00000000  00000000  0003b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000cc8  00000000  00000000  0003be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003675b  00000000  00000000  0003caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010fb2  00000000  00000000  00073253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e7f5  00000000  00000000  00084205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e29fa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003af0  00000000  00000000  001e2a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080056ac 	.word	0x080056ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080056ac 	.word	0x080056ac

080002d8 <sine_wave>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t data[100];
void sine_wave(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 100; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	80fb      	strh	r3, [r7, #6]
 80002e2:	e027      	b.n	8000334 <sine_wave+0x5c>
		data[i] = (uint16_t)(2000 * sin(i * 2 * 3.14159 / 100) + 2000);
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	ee07 3a90 	vmov	s15, r3
 80002ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80002f0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000348 <sine_wave+0x70>
 80002f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80002f8:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000350 <sine_wave+0x78>
 80002fc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000300:	eeb0 0b46 	vmov.f64	d0, d6
 8000304:	f004 fbf4 	bl	8004af0 <sin>
 8000308:	eeb0 7b40 	vmov.f64	d7, d0
 800030c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000358 <sine_wave+0x80>
 8000310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000314:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000358 <sine_wave+0x80>
 8000318:	ee37 7b06 	vadd.f64	d7, d7, d6
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000322:	ee17 2a90 	vmov	r2, s15
 8000326:	b291      	uxth	r1, r2
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <sine_wave+0x88>)
 800032a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < 100; i++) {
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	3301      	adds	r3, #1
 8000332:	80fb      	strh	r3, [r7, #6]
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	2b63      	cmp	r3, #99	; 0x63
 8000338:	d9d4      	bls.n	80002e4 <sine_wave+0xc>
	}
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	f3af 8000 	nop.w
 8000348:	f01b866e 	.word	0xf01b866e
 800034c:	400921f9 	.word	0x400921f9
 8000350:	00000000 	.word	0x00000000
 8000354:	40590000 	.word	0x40590000
 8000358:	00000000 	.word	0x00000000
 800035c:	409f4000 	.word	0x409f4000
 8000360:	240000b8 	.word	0x240000b8

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036a:	f000 faed 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f000 f81d 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000372:	f000 f91d 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000376:	f000 f8fb 	bl	8000570 <MX_DMA_Init>
  MX_DAC1_Init();
 800037a:	f000 f891 	bl	80004a0 <MX_DAC1_Init>
  MX_TIM6_Init();
 800037e:	f000 f8c1 	bl	8000504 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  sine_wave();
 8000382:	f7ff ffa9 	bl	80002d8 <sine_wave>
  HAL_TIM_Base_Start(&htim6);
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <main+0x3c>)
 8000388:	f004 f9ec 	bl	8004764 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)data, 100, DAC_ALIGN_12B_R);
 800038c:	2300      	movs	r3, #0
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2364      	movs	r3, #100	; 0x64
 8000392:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <main+0x40>)
 8000394:	2110      	movs	r1, #16
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <main+0x44>)
 8000398:	f000 fcca 	bl	8000d30 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039c:	e7fe      	b.n	800039c <main+0x38>
 800039e:	bf00      	nop
 80003a0:	24000180 	.word	0x24000180
 80003a4:	240000b8 	.word	0x240000b8
 80003a8:	240000a4 	.word	0x240000a4

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09c      	sub	sp, #112	; 0x70
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b6:	224c      	movs	r2, #76	; 0x4c
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 fb8e 	bl	8004adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2220      	movs	r2, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 fb88 	bl	8004adc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003cc:	2002      	movs	r0, #2
 80003ce:	f003 f9db 	bl	8003788 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003d2:	2300      	movs	r3, #0
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	4b30      	ldr	r3, [pc, #192]	; (8000498 <SystemClock_Config+0xec>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a2f      	ldr	r2, [pc, #188]	; (8000498 <SystemClock_Config+0xec>)
 80003dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b2d      	ldr	r3, [pc, #180]	; (8000498 <SystemClock_Config+0xec>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	4b2b      	ldr	r3, [pc, #172]	; (800049c <SystemClock_Config+0xf0>)
 80003ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f0:	4a2a      	ldr	r2, [pc, #168]	; (800049c <SystemClock_Config+0xf0>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003f8:	4b28      	ldr	r3, [pc, #160]	; (800049c <SystemClock_Config+0xf0>)
 80003fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000404:	bf00      	nop
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <SystemClock_Config+0xec>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800040e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000412:	d1f8      	bne.n	8000406 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000414:	2301      	movs	r3, #1
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000422:	2302      	movs	r3, #2
 8000424:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000426:	2305      	movs	r3, #5
 8000428:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800042a:	23c0      	movs	r3, #192	; 0xc0
 800042c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800043a:	2308      	movs	r3, #8
 800043c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800043e:	2300      	movs	r3, #0
 8000440:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044a:	4618      	mov	r0, r3
 800044c:	f003 f9d6 	bl	80037fc <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000456:	f000 f8d5 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	233f      	movs	r3, #63	; 0x3f
 800045c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	2303      	movs	r3, #3
 8000460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000466:	2308      	movs	r3, #8
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800046a:	2340      	movs	r3, #64	; 0x40
 800046c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800046e:	2340      	movs	r3, #64	; 0x40
 8000470:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2104      	movs	r1, #4
 8000480:	4618      	mov	r0, r3
 8000482:	f003 fde7 	bl	8004054 <HAL_RCC_ClockConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800048c:	f000 f8ba 	bl	8000604 <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3770      	adds	r7, #112	; 0x70
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	58024800 	.word	0x58024800
 800049c:	58000400 	.word	0x58000400

080004a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2224      	movs	r2, #36	; 0x24
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f004 fb15 	bl	8004adc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <MX_DAC1_Init+0x5c>)
 80004b4:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_DAC1_Init+0x60>)
 80004b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004b8:	4810      	ldr	r0, [pc, #64]	; (80004fc <MX_DAC1_Init+0x5c>)
 80004ba:	f000 fc16 	bl	8000cea <HAL_DAC_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004c4:	f000 f89e 	bl	8000604 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004cc:	2316      	movs	r3, #22
 80004ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2210      	movs	r2, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <MX_DAC1_Init+0x5c>)
 80004e4:	f000 fd0e 	bl	8000f04 <HAL_DAC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f889 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	240000a4 	.word	0x240000a4
 8000500:	40007400 	.word	0x40007400

08000504 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_TIM6_Init+0x64>)
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_TIM6_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_TIM6_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_TIM6_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 239;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_TIM6_Init+0x64>)
 8000528:	22ef      	movs	r2, #239	; 0xef
 800052a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_TIM6_Init+0x64>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000532:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_TIM6_Init+0x64>)
 8000534:	f004 f8be 	bl	80046b4 <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800053e:	f000 f861 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000542:	2320      	movs	r3, #32
 8000544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <MX_TIM6_Init+0x64>)
 8000550:	f004 fa12 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800055a:	f000 f853 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	24000180 	.word	0x24000180
 800056c:	40001000 	.word	0x40001000

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_DMA_Init+0x3c>)
 8000578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <MX_DMA_Init+0x3c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_DMA_Init+0x3c>)
 8000588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	200b      	movs	r0, #11
 800059a:	f000 fb72 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800059e:	200b      	movs	r0, #11
 80005a0:	f000 fb89 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	58024400 	.word	0x58024400

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_GPIO_Init+0x50>)
 80005b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <MX_GPIO_Init+0x50>)
 80005be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_GPIO_Init+0x50>)
 80005c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_GPIO_Init+0x50>)
 80005d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <MX_GPIO_Init+0x50>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_GPIO_Init+0x50>)
 80005e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	58024400 	.word	0x58024400

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_MspInit+0x30>)
 8000618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x30>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x30>)
 8000628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800062c:	f003 0302 	and.w	r3, r3, #2
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58024400 	.word	0x58024400

08000644 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <HAL_DAC_MspInit+0xe0>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d159      	bne.n	800071a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000666:	4b30      	ldr	r3, [pc, #192]	; (8000728 <HAL_DAC_MspInit+0xe4>)
 8000668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800066c:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <HAL_DAC_MspInit+0xe4>)
 800066e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000672:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <HAL_DAC_MspInit+0xe4>)
 8000678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800067c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <HAL_DAC_MspInit+0xe4>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068a:	4a27      	ldr	r2, [pc, #156]	; (8000728 <HAL_DAC_MspInit+0xe4>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <HAL_DAC_MspInit+0xe4>)
 8000696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006a2:	2320      	movs	r3, #32
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481d      	ldr	r0, [pc, #116]	; (800072c <HAL_DAC_MspInit+0xe8>)
 80006b6:	f002 feb7 	bl	8003428 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream0;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <HAL_DAC_MspInit+0xf0>)
 80006be:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006c8:	2240      	movs	r2, #64	; 0x40
 80006ca:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006e0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_DAC_MspInit+0xec>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <HAL_DAC_MspInit+0xec>)
 8000700:	f000 fdba 	bl	8001278 <HAL_DMA_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800070a:	f7ff ff7b 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_DAC_MspInit+0xec>)
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <HAL_DAC_MspInit+0xec>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40007400 	.word	0x40007400
 8000728:	58024400 	.word	0x58024400
 800072c:	58020000 	.word	0x58020000
 8000730:	2400002c 	.word	0x2400002c
 8000734:	40020010 	.word	0x40020010

08000738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <HAL_TIM_Base_MspInit+0x3c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10e      	bne.n	8000768 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_TIM_Base_MspInit+0x40>)
 800074c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <HAL_TIM_Base_MspInit+0x40>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <HAL_TIM_Base_MspInit+0x40>)
 800075c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40001000 	.word	0x40001000
 8000778:	58024400 	.word	0x58024400

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f930 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <DMA1_Stream0_IRQHandler+0x10>)
 80007d6:	f001 fb15 	bl	8001e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2400002c 	.word	0x2400002c

080007e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <SystemInit+0xe4>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a36      	ldr	r2, [pc, #216]	; (80008c8 <SystemInit+0xe4>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <SystemInit+0xe8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f003 030f 	and.w	r3, r3, #15
 8000800:	2b06      	cmp	r3, #6
 8000802:	d807      	bhi.n	8000814 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000804:	4b31      	ldr	r3, [pc, #196]	; (80008cc <SystemInit+0xe8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f023 030f 	bic.w	r3, r3, #15
 800080c:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <SystemInit+0xe8>)
 800080e:	f043 0307 	orr.w	r3, r3, #7
 8000812:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <SystemInit+0xec>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <SystemInit+0xec>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <SystemInit+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <SystemInit+0xec>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4929      	ldr	r1, [pc, #164]	; (80008d0 <SystemInit+0xec>)
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <SystemInit+0xf0>)
 800082e:	4013      	ands	r3, r2
 8000830:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <SystemInit+0xe8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	2b00      	cmp	r3, #0
 800083c:	d007      	beq.n	800084e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <SystemInit+0xe8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f023 030f 	bic.w	r3, r3, #15
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <SystemInit+0xe8>)
 8000848:	f043 0307 	orr.w	r3, r3, #7
 800084c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <SystemInit+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <SystemInit+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <SystemInit+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <SystemInit+0xec>)
 8000862:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <SystemInit+0xf4>)
 8000864:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <SystemInit+0xec>)
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <SystemInit+0xf8>)
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <SystemInit+0xec>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <SystemInit+0xfc>)
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <SystemInit+0xec>)
 8000874:	2200      	movs	r2, #0
 8000876:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <SystemInit+0xec>)
 800087a:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <SystemInit+0xfc>)
 800087c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <SystemInit+0xec>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <SystemInit+0xec>)
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <SystemInit+0xfc>)
 8000888:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <SystemInit+0xec>)
 800088c:	2200      	movs	r2, #0
 800088e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <SystemInit+0xec>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <SystemInit+0xec>)
 8000896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <SystemInit+0xec>)
 800089e:	2200      	movs	r2, #0
 80008a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <SystemInit+0x100>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <SystemInit+0x104>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008ae:	d202      	bcs.n	80008b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <SystemInit+0x108>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <SystemInit+0x10c>)
 80008b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80008bc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	52002000 	.word	0x52002000
 80008d0:	58024400 	.word	0x58024400
 80008d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008d8:	02020200 	.word	0x02020200
 80008dc:	01ff0000 	.word	0x01ff0000
 80008e0:	01010280 	.word	0x01010280
 80008e4:	5c001000 	.word	0x5c001000
 80008e8:	ffff0000 	.word	0xffff0000
 80008ec:	51008108 	.word	0x51008108
 80008f0:	52004000 	.word	0x52004000

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800092c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff ff74 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f004 f8b7 	bl	8004a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fd1d 	bl	8000364 <main>
  bx  lr
 800092a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000930:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000934:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000938:	080058c0 	.word	0x080058c0
  ldr r2, =_sbss
 800093c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000940:	240001d0 	.word	0x240001d0

08000944 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC3_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094e:	2003      	movs	r0, #3
 8000950:	f000 f98c 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000954:	f003 fd34 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8000958:	4602      	mov	r2, r0
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_Init+0x68>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	f003 030f 	and.w	r3, r3, #15
 8000964:	4913      	ldr	r1, [pc, #76]	; (80009b4 <HAL_Init+0x6c>)
 8000966:	5ccb      	ldrb	r3, [r1, r3]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_Init+0x68>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_Init+0x6c>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <HAL_Init+0x70>)
 800098a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <HAL_Init+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f814 	bl	80009c0 <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e002      	b.n	80009a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff fe35 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58024400 	.word	0x58024400
 80009b4:	080056c8 	.word	0x080056c8
 80009b8:	24000004 	.word	0x24000004
 80009bc:	24000000 	.word	0x24000000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e021      	b.n	8000a18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_InitTick+0x64>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f971 	bl	8000cd2 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f93b 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x68>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2400000c 	.word	0x2400000c
 8000a24:	24000000 	.word	0x24000000
 8000a28:	24000008 	.word	0x24000008

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2400000c 	.word	0x2400000c
 8000a50:	240001cc 	.word	0x240001cc

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	240001cc 	.word	0x240001cc

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2400000c 	.word	0x2400000c

08000ab4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetREVID+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	0c1b      	lsrs	r3, r3, #16
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	5c001000 	.word	0x5c001000

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <__NVIC_SetPriorityGrouping+0x40>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x40>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	05fa0000 	.word	0x05fa0000

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff40 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff90 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff33 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa4 	bl	8000c28 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e014      	b.n	8000d26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d105      	bne.n	8000d12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fc99 	bl	8000644 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2202      	movs	r2, #2
 8000d16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_DAC_Start_DMA+0x1e>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e0ab      	b.n	8000ea6 <HAL_DAC_Start_DMA+0x176>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2201      	movs	r2, #1
 8000d52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2202      	movs	r2, #2
 8000d58:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d12f      	bne.n	8000dc0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	4a52      	ldr	r2, [pc, #328]	; (8000eb0 <HAL_DAC_Start_DMA+0x180>)
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	4a51      	ldr	r2, [pc, #324]	; (8000eb4 <HAL_DAC_Start_DMA+0x184>)
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_DAC_Start_DMA+0x188>)
 8000d76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d86:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d013      	beq.n	8000db6 <HAL_DAC_Start_DMA+0x86>
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d845      	bhi.n	8000e20 <HAL_DAC_Start_DMA+0xf0>
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_DAC_Start_DMA+0x72>
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d005      	beq.n	8000dac <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000da0:	e03e      	b.n	8000e20 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3308      	adds	r3, #8
 8000da8:	613b      	str	r3, [r7, #16]
        break;
 8000daa:	e03c      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	330c      	adds	r3, #12
 8000db2:	613b      	str	r3, [r7, #16]
        break;
 8000db4:	e037      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3310      	adds	r3, #16
 8000dbc:	613b      	str	r3, [r7, #16]
        break;
 8000dbe:	e032      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <HAL_DAC_Start_DMA+0x18c>)
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_DAC_Start_DMA+0x190>)
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a3b      	ldr	r2, [pc, #236]	; (8000ec4 <HAL_DAC_Start_DMA+0x194>)
 8000dd6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000de6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d013      	beq.n	8000e16 <HAL_DAC_Start_DMA+0xe6>
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d817      	bhi.n	8000e24 <HAL_DAC_Start_DMA+0xf4>
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_DAC_Start_DMA+0xd2>
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d005      	beq.n	8000e0c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000e00:	e010      	b.n	8000e24 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3314      	adds	r3, #20
 8000e08:	613b      	str	r3, [r7, #16]
        break;
 8000e0a:	e00c      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3318      	adds	r3, #24
 8000e12:	613b      	str	r3, [r7, #16]
        break;
 8000e14:	e007      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	331c      	adds	r3, #28
 8000e1c:	613b      	str	r3, [r7, #16]
        break;
 8000e1e:	e002      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000e20:	bf00      	nop
 8000e22:	e000      	b.n	8000e26 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000e24:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d111      	bne.n	8000e50 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6898      	ldr	r0, [r3, #8]
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	f000 fd73 	bl	8001930 <HAL_DMA_Start_IT>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	75fb      	strb	r3, [r7, #23]
 8000e4e:	e010      	b.n	8000e72 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	68d8      	ldr	r0, [r3, #12]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	f000 fd61 	bl	8001930 <HAL_DMA_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10c      	bne.n	8000e98 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e005      	b.n	8000ea4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	f043 0204 	orr.w	r2, r3, #4
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	08001165 	.word	0x08001165
 8000eb4:	08001187 	.word	0x08001187
 8000eb8:	080011a3 	.word	0x080011a3
 8000ebc:	0800120d 	.word	0x0800120d
 8000ec0:	0800122f 	.word	0x0800122f
 8000ec4:	0800124b 	.word	0x0800124b

08000ec8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_DAC_ConfigChannel+0x18>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e11d      	b.n	8001158 <HAL_DAC_ConfigChannel+0x254>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2202      	movs	r2, #2
 8000f26:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d174      	bne.n	800101a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f30:	f7ff fd90 	bl	8000a54 <HAL_GetTick>
 8000f34:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d134      	bne.n	8000fa6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f3c:	e011      	b.n	8000f62 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f3e:	f7ff fd89 	bl	8000a54 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d90a      	bls.n	8000f62 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	f043 0208 	orr.w	r2, r3, #8
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e0fa      	b.n	8001158 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f68:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <HAL_DAC_ConfigChannel+0x25c>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e6      	bne.n	8000f3e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fd7b 	bl	8000a6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	6992      	ldr	r2, [r2, #24]
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f80:	e01e      	b.n	8000fc0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f82:	f7ff fd67 	bl	8000a54 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d90a      	bls.n	8000fa6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	f043 0208 	orr.w	r2, r3, #8
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e0d8      	b.n	8001158 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dbe8      	blt.n	8000f82 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fd5b 	bl	8000a6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	6992      	ldr	r2, [r2, #24]
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	ea02 0103 	and.w	r1, r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	69da      	ldr	r2, [r3, #28]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	21ff      	movs	r1, #255	; 0xff
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	ea02 0103 	and.w	r1, r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d11d      	bne.n	800105e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4013      	ands	r3, r2
 800103c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4313      	orrs	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001064:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2207      	movs	r2, #7
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	4013      	ands	r3, r2
 8001078:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e00f      	b.n	80010a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d102      	bne.n	8001096 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e008      	b.n	80010a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800109e:	2301      	movs	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e001      	b.n	80010a8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4013      	ands	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	22c0      	movs	r2, #192	; 0xc0
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43da      	mvns	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	400a      	ands	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2201      	movs	r2, #1
 800114e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20008000 	.word	0x20008000

08001164 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff fea8 	bl	8000ec8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2201      	movs	r2, #1
 800117c:	711a      	strb	r2, [r3, #4]
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff fea1 	bl	8000edc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	f043 0204 	orr.w	r2, r3, #4
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff fe97 	bl	8000ef0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2201      	movs	r2, #1
 80011c6:	711a      	strb	r2, [r3, #4]
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001218:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ffd8 	bl	80011d0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	711a      	strb	r2, [r3, #4]
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff ffd1 	bl	80011e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001256:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff ffc7 	bl	80011f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2201      	movs	r2, #1
 800126e:	711a      	strb	r2, [r3, #4]
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff fbe8 	bl	8000a54 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e316      	b.n	80018be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a66      	ldr	r2, [pc, #408]	; (8001430 <HAL_DMA_Init+0x1b8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d04a      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_DMA_Init+0x1bc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d045      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a63      	ldr	r2, [pc, #396]	; (8001438 <HAL_DMA_Init+0x1c0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d040      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a62      	ldr	r2, [pc, #392]	; (800143c <HAL_DMA_Init+0x1c4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d03b      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a60      	ldr	r2, [pc, #384]	; (8001440 <HAL_DMA_Init+0x1c8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d036      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_DMA_Init+0x1cc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d031      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_DMA_Init+0x1d0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d02c      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_DMA_Init+0x1d4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d027      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a5a      	ldr	r2, [pc, #360]	; (8001450 <HAL_DMA_Init+0x1d8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d022      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_DMA_Init+0x1dc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d01d      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_DMA_Init+0x1e0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d018      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_DMA_Init+0x1e4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_DMA_Init+0x1e8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00e      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_DMA_Init+0x1ec>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d009      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_DMA_Init+0x1f0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d004      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_DMA_Init+0x1f4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_DMA_Init+0xbc>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_DMA_Init+0xbe>
 8001334:	2300      	movs	r3, #0
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 813b 	beq.w	80015b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <HAL_DMA_Init+0x1b8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d04a      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_DMA_Init+0x1bc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d045      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_DMA_Init+0x1c0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d040      	beq.n	80013ec <HAL_DMA_Init+0x174>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_DMA_Init+0x1c4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03b      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a31      	ldr	r2, [pc, #196]	; (8001440 <HAL_DMA_Init+0x1c8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d036      	beq.n	80013ec <HAL_DMA_Init+0x174>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_DMA_Init+0x1cc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d031      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_DMA_Init+0x1d0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d02c      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <HAL_DMA_Init+0x1d4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d027      	beq.n	80013ec <HAL_DMA_Init+0x174>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_DMA_Init+0x1d8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d022      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_DMA_Init+0x1dc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01d      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_DMA_Init+0x1e0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d018      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_DMA_Init+0x1e4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_DMA_Init+0x1e8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00e      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_DMA_Init+0x1ec>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d009      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_DMA_Init+0x1f0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_DMA_Init+0x1f4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d108      	bne.n	80013fe <HAL_DMA_Init+0x186>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_DMA_Init+0x196>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800140e:	e02f      	b.n	8001470 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001410:	f7ff fb20 	bl	8000a54 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b05      	cmp	r3, #5
 800141c:	d928      	bls.n	8001470 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e246      	b.n	80018be <HAL_DMA_Init+0x646>
 8001430:	40020010 	.word	0x40020010
 8001434:	40020028 	.word	0x40020028
 8001438:	40020040 	.word	0x40020040
 800143c:	40020058 	.word	0x40020058
 8001440:	40020070 	.word	0x40020070
 8001444:	40020088 	.word	0x40020088
 8001448:	400200a0 	.word	0x400200a0
 800144c:	400200b8 	.word	0x400200b8
 8001450:	40020410 	.word	0x40020410
 8001454:	40020428 	.word	0x40020428
 8001458:	40020440 	.word	0x40020440
 800145c:	40020458 	.word	0x40020458
 8001460:	40020470 	.word	0x40020470
 8001464:	40020488 	.word	0x40020488
 8001468:	400204a0 	.word	0x400204a0
 800146c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1c8      	bne.n	8001410 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4b83      	ldr	r3, [pc, #524]	; (8001698 <HAL_DMA_Init+0x420>)
 800148a:	4013      	ands	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001496:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014d4:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_DMA_Init+0x424>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <HAL_DMA_Init+0x428>)
 80014da:	4013      	ands	r3, r2
 80014dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e0:	d328      	bcc.n	8001534 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b28      	cmp	r3, #40	; 0x28
 80014e8:	d903      	bls.n	80014f2 <HAL_DMA_Init+0x27a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b2e      	cmp	r3, #46	; 0x2e
 80014f0:	d917      	bls.n	8001522 <HAL_DMA_Init+0x2aa>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b3e      	cmp	r3, #62	; 0x3e
 80014f8:	d903      	bls.n	8001502 <HAL_DMA_Init+0x28a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b42      	cmp	r3, #66	; 0x42
 8001500:	d90f      	bls.n	8001522 <HAL_DMA_Init+0x2aa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b46      	cmp	r3, #70	; 0x46
 8001508:	d903      	bls.n	8001512 <HAL_DMA_Init+0x29a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b48      	cmp	r3, #72	; 0x48
 8001510:	d907      	bls.n	8001522 <HAL_DMA_Init+0x2aa>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b4e      	cmp	r3, #78	; 0x4e
 8001518:	d905      	bls.n	8001526 <HAL_DMA_Init+0x2ae>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b52      	cmp	r3, #82	; 0x52
 8001520:	d801      	bhi.n	8001526 <HAL_DMA_Init+0x2ae>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_DMA_Init+0x2b0>
 8001526:	2300      	movs	r3, #0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001532:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f023 0307 	bic.w	r3, r3, #7
 800154a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	2b04      	cmp	r3, #4
 800155c:	d117      	bne.n	800158e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 fdcf 	bl	8003114 <DMA_CheckFifoParam>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e197      	b.n	80018be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f001 fd0a 	bl	8002fb0 <DMA_CalcBaseAndBitshift>
 800159c:	4603      	mov	r3, r0
 800159e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	223f      	movs	r2, #63	; 0x3f
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e0cd      	b.n	800174e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a3b      	ldr	r2, [pc, #236]	; (80016a4 <HAL_DMA_Init+0x42c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <HAL_DMA_Init+0x430>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_DMA_Init+0x434>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <HAL_DMA_Init+0x438>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_DMA_Init+0x43c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <HAL_DMA_Init+0x440>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a32      	ldr	r2, [pc, #200]	; (80016bc <HAL_DMA_Init+0x444>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <HAL_DMA_Init+0x448>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Init+0x38e>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_DMA_Init+0x390>
 8001606:	2300      	movs	r3, #0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8097 	beq.w	800173c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_DMA_Init+0x42c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d021      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_DMA_Init+0x430>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01c      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <HAL_DMA_Init+0x434>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d017      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_DMA_Init+0x438>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d012      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_DMA_Init+0x43c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <HAL_DMA_Init+0x440>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d008      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_DMA_Init+0x444>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d003      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_DMA_Init+0x448>)
 800165a:	4293      	cmp	r3, r2
 800165c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_DMA_Init+0x44c>)
 800167a:	4013      	ands	r3, r2
 800167c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d020      	beq.n	80016c8 <HAL_DMA_Init+0x450>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b80      	cmp	r3, #128	; 0x80
 800168c:	d102      	bne.n	8001694 <HAL_DMA_Init+0x41c>
 800168e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001692:	e01a      	b.n	80016ca <HAL_DMA_Init+0x452>
 8001694:	2300      	movs	r3, #0
 8001696:	e018      	b.n	80016ca <HAL_DMA_Init+0x452>
 8001698:	fe10803f 	.word	0xfe10803f
 800169c:	5c001000 	.word	0x5c001000
 80016a0:	ffff0000 	.word	0xffff0000
 80016a4:	58025408 	.word	0x58025408
 80016a8:	5802541c 	.word	0x5802541c
 80016ac:	58025430 	.word	0x58025430
 80016b0:	58025444 	.word	0x58025444
 80016b4:	58025458 	.word	0x58025458
 80016b8:	5802546c 	.word	0x5802546c
 80016bc:	58025480 	.word	0x58025480
 80016c0:	58025494 	.word	0x58025494
 80016c4:	fffe000f 	.word	0xfffe000f
 80016c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68d2      	ldr	r2, [r2, #12]
 80016ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b6e      	ldr	r3, [pc, #440]	; (80018c8 <HAL_DMA_Init+0x650>)
 8001710:	4413      	add	r3, r2
 8001712:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_DMA_Init+0x654>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	009a      	lsls	r2, r3, #2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f001 fc45 	bl	8002fb0 <DMA_CalcBaseAndBitshift>
 8001726:	4603      	mov	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2201      	movs	r2, #1
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	e008      	b.n	800174e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0b7      	b.n	80018be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a5f      	ldr	r2, [pc, #380]	; (80018d0 <HAL_DMA_Init+0x658>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d072      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5d      	ldr	r2, [pc, #372]	; (80018d4 <HAL_DMA_Init+0x65c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d06d      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a5c      	ldr	r2, [pc, #368]	; (80018d8 <HAL_DMA_Init+0x660>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d068      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <HAL_DMA_Init+0x664>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d063      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a59      	ldr	r2, [pc, #356]	; (80018e0 <HAL_DMA_Init+0x668>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d05e      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_DMA_Init+0x66c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d059      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a56      	ldr	r2, [pc, #344]	; (80018e8 <HAL_DMA_Init+0x670>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d054      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <HAL_DMA_Init+0x674>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d04f      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a53      	ldr	r2, [pc, #332]	; (80018f0 <HAL_DMA_Init+0x678>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d04a      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <HAL_DMA_Init+0x67c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d045      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a50      	ldr	r2, [pc, #320]	; (80018f8 <HAL_DMA_Init+0x680>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d040      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_DMA_Init+0x684>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d03b      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <HAL_DMA_Init+0x688>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d036      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4b      	ldr	r2, [pc, #300]	; (8001904 <HAL_DMA_Init+0x68c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_DMA_Init+0x690>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d02c      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_DMA_Init+0x694>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d027      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a47      	ldr	r2, [pc, #284]	; (8001910 <HAL_DMA_Init+0x698>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_DMA_Init+0x69c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a44      	ldr	r2, [pc, #272]	; (8001918 <HAL_DMA_Init+0x6a0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_DMA_Init+0x6a4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_DMA_Init+0x6a8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_DMA_Init+0x6ac>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_DMA_Init+0x6b0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a3c      	ldr	r2, [pc, #240]	; (800192c <HAL_DMA_Init+0x6b4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Init+0x5ca>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Init+0x5cc>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d032      	beq.n	80018ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f001 fcdf 	bl	800320c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b80      	cmp	r3, #128	; 0x80
 8001854:	d102      	bne.n	800185c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001870:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <HAL_DMA_Init+0x624>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b08      	cmp	r3, #8
 8001880:	d80c      	bhi.n	800189c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f001 fd5c 	bl	8003340 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e008      	b.n	80018ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	a7fdabf8 	.word	0xa7fdabf8
 80018cc:	cccccccd 	.word	0xcccccccd
 80018d0:	40020010 	.word	0x40020010
 80018d4:	40020028 	.word	0x40020028
 80018d8:	40020040 	.word	0x40020040
 80018dc:	40020058 	.word	0x40020058
 80018e0:	40020070 	.word	0x40020070
 80018e4:	40020088 	.word	0x40020088
 80018e8:	400200a0 	.word	0x400200a0
 80018ec:	400200b8 	.word	0x400200b8
 80018f0:	40020410 	.word	0x40020410
 80018f4:	40020428 	.word	0x40020428
 80018f8:	40020440 	.word	0x40020440
 80018fc:	40020458 	.word	0x40020458
 8001900:	40020470 	.word	0x40020470
 8001904:	40020488 	.word	0x40020488
 8001908:	400204a0 	.word	0x400204a0
 800190c:	400204b8 	.word	0x400204b8
 8001910:	58025408 	.word	0x58025408
 8001914:	5802541c 	.word	0x5802541c
 8001918:	58025430 	.word	0x58025430
 800191c:	58025444 	.word	0x58025444
 8001920:	58025458 	.word	0x58025458
 8001924:	5802546c 	.word	0x5802546c
 8001928:	58025480 	.word	0x58025480
 800192c:	58025494 	.word	0x58025494

08001930 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e226      	b.n	8001d9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_DMA_Start_IT+0x2a>
 8001956:	2302      	movs	r3, #2
 8001958:	e21f      	b.n	8001d9a <HAL_DMA_Start_IT+0x46a>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b01      	cmp	r3, #1
 800196c:	f040 820a 	bne.w	8001d84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a68      	ldr	r2, [pc, #416]	; (8001b24 <HAL_DMA_Start_IT+0x1f4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04a      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a66      	ldr	r2, [pc, #408]	; (8001b28 <HAL_DMA_Start_IT+0x1f8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d045      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_DMA_Start_IT+0x1fc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d040      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <HAL_DMA_Start_IT+0x200>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d03b      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <HAL_DMA_Start_IT+0x204>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d036      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <HAL_DMA_Start_IT+0x208>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d031      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <HAL_DMA_Start_IT+0x20c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d02c      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a5d      	ldr	r2, [pc, #372]	; (8001b40 <HAL_DMA_Start_IT+0x210>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d027      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_DMA_Start_IT+0x214>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_DMA_Start_IT+0x218>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01d      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a59      	ldr	r2, [pc, #356]	; (8001b4c <HAL_DMA_Start_IT+0x21c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d018      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a57      	ldr	r2, [pc, #348]	; (8001b50 <HAL_DMA_Start_IT+0x220>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <HAL_DMA_Start_IT+0x224>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00e      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <HAL_DMA_Start_IT+0x228>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d009      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_DMA_Start_IT+0x22c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d004      	beq.n	8001a1e <HAL_DMA_Start_IT+0xee>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_DMA_Start_IT+0x230>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d108      	bne.n	8001a30 <HAL_DMA_Start_IT+0x100>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_DMA_Start_IT+0x110>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f001 f906 	bl	8002c58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <HAL_DMA_Start_IT+0x1f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d04a      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a33      	ldr	r2, [pc, #204]	; (8001b28 <HAL_DMA_Start_IT+0x1f8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d045      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <HAL_DMA_Start_IT+0x1fc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d040      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <HAL_DMA_Start_IT+0x200>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d03b      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <HAL_DMA_Start_IT+0x204>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d036      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_DMA_Start_IT+0x208>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d031      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <HAL_DMA_Start_IT+0x20c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d02c      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <HAL_DMA_Start_IT+0x210>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d027      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_DMA_Start_IT+0x214>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d022      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <HAL_DMA_Start_IT+0x218>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d01d      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_DMA_Start_IT+0x21c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d018      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <HAL_DMA_Start_IT+0x220>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <HAL_DMA_Start_IT+0x224>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00e      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <HAL_DMA_Start_IT+0x228>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d009      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_DMA_Start_IT+0x22c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d004      	beq.n	8001aec <HAL_DMA_Start_IT+0x1bc>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_DMA_Start_IT+0x230>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_DMA_Start_IT+0x1c0>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_DMA_Start_IT+0x1c2>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d036      	beq.n	8001b64 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 021e 	bic.w	r2, r3, #30
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0216 	orr.w	r2, r2, #22
 8001b08:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03e      	beq.n	8001b90 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0208 	orr.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e035      	b.n	8001b90 <HAL_DMA_Start_IT+0x260>
 8001b24:	40020010 	.word	0x40020010
 8001b28:	40020028 	.word	0x40020028
 8001b2c:	40020040 	.word	0x40020040
 8001b30:	40020058 	.word	0x40020058
 8001b34:	40020070 	.word	0x40020070
 8001b38:	40020088 	.word	0x40020088
 8001b3c:	400200a0 	.word	0x400200a0
 8001b40:	400200b8 	.word	0x400200b8
 8001b44:	40020410 	.word	0x40020410
 8001b48:	40020428 	.word	0x40020428
 8001b4c:	40020440 	.word	0x40020440
 8001b50:	40020458 	.word	0x40020458
 8001b54:	40020470 	.word	0x40020470
 8001b58:	40020488 	.word	0x40020488
 8001b5c:	400204a0 	.word	0x400204a0
 8001b60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 020e 	bic.w	r2, r3, #14
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 020a 	orr.w	r2, r2, #10
 8001b76:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0204 	orr.w	r2, r2, #4
 8001b8e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a83      	ldr	r2, [pc, #524]	; (8001da4 <HAL_DMA_Start_IT+0x474>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d072      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a82      	ldr	r2, [pc, #520]	; (8001da8 <HAL_DMA_Start_IT+0x478>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d06d      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a80      	ldr	r2, [pc, #512]	; (8001dac <HAL_DMA_Start_IT+0x47c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d068      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7f      	ldr	r2, [pc, #508]	; (8001db0 <HAL_DMA_Start_IT+0x480>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d063      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a7d      	ldr	r2, [pc, #500]	; (8001db4 <HAL_DMA_Start_IT+0x484>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d05e      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	; (8001db8 <HAL_DMA_Start_IT+0x488>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d059      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7a      	ldr	r2, [pc, #488]	; (8001dbc <HAL_DMA_Start_IT+0x48c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d054      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a79      	ldr	r2, [pc, #484]	; (8001dc0 <HAL_DMA_Start_IT+0x490>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d04f      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a77      	ldr	r2, [pc, #476]	; (8001dc4 <HAL_DMA_Start_IT+0x494>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d04a      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a76      	ldr	r2, [pc, #472]	; (8001dc8 <HAL_DMA_Start_IT+0x498>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d045      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a74      	ldr	r2, [pc, #464]	; (8001dcc <HAL_DMA_Start_IT+0x49c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d040      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a73      	ldr	r2, [pc, #460]	; (8001dd0 <HAL_DMA_Start_IT+0x4a0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d03b      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a71      	ldr	r2, [pc, #452]	; (8001dd4 <HAL_DMA_Start_IT+0x4a4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d036      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a70      	ldr	r2, [pc, #448]	; (8001dd8 <HAL_DMA_Start_IT+0x4a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d031      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6e      	ldr	r2, [pc, #440]	; (8001ddc <HAL_DMA_Start_IT+0x4ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02c      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6d      	ldr	r2, [pc, #436]	; (8001de0 <HAL_DMA_Start_IT+0x4b0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d027      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6b      	ldr	r2, [pc, #428]	; (8001de4 <HAL_DMA_Start_IT+0x4b4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d022      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_DMA_Start_IT+0x4b8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d01d      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a68      	ldr	r2, [pc, #416]	; (8001dec <HAL_DMA_Start_IT+0x4bc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d018      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <HAL_DMA_Start_IT+0x4c0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d013      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <HAL_DMA_Start_IT+0x4c4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00e      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a64      	ldr	r2, [pc, #400]	; (8001df8 <HAL_DMA_Start_IT+0x4c8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a62      	ldr	r2, [pc, #392]	; (8001dfc <HAL_DMA_Start_IT+0x4cc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d004      	beq.n	8001c80 <HAL_DMA_Start_IT+0x350>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a61      	ldr	r2, [pc, #388]	; (8001e00 <HAL_DMA_Start_IT+0x4d0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Start_IT+0x354>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_Start_IT+0x356>
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01a      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cbe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <HAL_DMA_Start_IT+0x474>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d04a      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <HAL_DMA_Start_IT+0x478>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d045      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_DMA_Start_IT+0x47c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d040      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <HAL_DMA_Start_IT+0x480>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d03b      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a31      	ldr	r2, [pc, #196]	; (8001db4 <HAL_DMA_Start_IT+0x484>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d036      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <HAL_DMA_Start_IT+0x488>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d031      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <HAL_DMA_Start_IT+0x48c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02c      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <HAL_DMA_Start_IT+0x490>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d027      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <HAL_DMA_Start_IT+0x494>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d022      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <HAL_DMA_Start_IT+0x498>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d01d      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <HAL_DMA_Start_IT+0x49c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_DMA_Start_IT+0x4a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <HAL_DMA_Start_IT+0x4a4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_DMA_Start_IT+0x4a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <HAL_DMA_Start_IT+0x4ac>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_Start_IT+0x430>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <HAL_DMA_Start_IT+0x4b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <HAL_DMA_Start_IT+0x442>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e012      	b.n	8001d98 <HAL_DMA_Start_IT+0x468>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e009      	b.n	8001d98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020010 	.word	0x40020010
 8001da8:	40020028 	.word	0x40020028
 8001dac:	40020040 	.word	0x40020040
 8001db0:	40020058 	.word	0x40020058
 8001db4:	40020070 	.word	0x40020070
 8001db8:	40020088 	.word	0x40020088
 8001dbc:	400200a0 	.word	0x400200a0
 8001dc0:	400200b8 	.word	0x400200b8
 8001dc4:	40020410 	.word	0x40020410
 8001dc8:	40020428 	.word	0x40020428
 8001dcc:	40020440 	.word	0x40020440
 8001dd0:	40020458 	.word	0x40020458
 8001dd4:	40020470 	.word	0x40020470
 8001dd8:	40020488 	.word	0x40020488
 8001ddc:	400204a0 	.word	0x400204a0
 8001de0:	400204b8 	.word	0x400204b8
 8001de4:	58025408 	.word	0x58025408
 8001de8:	5802541c 	.word	0x5802541c
 8001dec:	58025430 	.word	0x58025430
 8001df0:	58025444 	.word	0x58025444
 8001df4:	58025458 	.word	0x58025458
 8001df8:	5802546c 	.word	0x5802546c
 8001dfc:	58025480 	.word	0x58025480
 8001e00:	58025494 	.word	0x58025494

08001e04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e10:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_DMA_IRQHandler+0x1ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	; (8001fb4 <HAL_DMA_IRQHandler+0x1b0>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5f      	ldr	r2, [pc, #380]	; (8001fb8 <HAL_DMA_IRQHandler+0x1b4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04a      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_DMA_IRQHandler+0x1b8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d045      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_DMA_IRQHandler+0x1bc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_DMA_IRQHandler+0x1c0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d03b      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a59      	ldr	r2, [pc, #356]	; (8001fc8 <HAL_DMA_IRQHandler+0x1c4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_DMA_IRQHandler+0x1c8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_DMA_IRQHandler+0x1cc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02c      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a54      	ldr	r2, [pc, #336]	; (8001fd4 <HAL_DMA_IRQHandler+0x1d0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d027      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <HAL_DMA_IRQHandler+0x1d4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_DMA_IRQHandler+0x1d8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_DMA_IRQHandler+0x1dc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4e      	ldr	r2, [pc, #312]	; (8001fe4 <HAL_DMA_IRQHandler+0x1e0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_DMA_IRQHandler+0x1e4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <HAL_DMA_IRQHandler+0x1e8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_DMA_IRQHandler+0x1ec>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xd2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a48      	ldr	r2, [pc, #288]	; (8001ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_IRQHandler+0xd6>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_DMA_IRQHandler+0xd8>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 842b 	beq.w	8002738 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2208      	movs	r2, #8
 8001eec:	409a      	lsls	r2, r3
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80a2 	beq.w	800203c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <HAL_DMA_IRQHandler+0x1b4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04a      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_DMA_IRQHandler+0x1b8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d045      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <HAL_DMA_IRQHandler+0x1bc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <HAL_DMA_IRQHandler+0x1c0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03b      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a28      	ldr	r2, [pc, #160]	; (8001fc8 <HAL_DMA_IRQHandler+0x1c4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <HAL_DMA_IRQHandler+0x1c8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <HAL_DMA_IRQHandler+0x1cc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02c      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_DMA_IRQHandler+0x1d0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d027      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <HAL_DMA_IRQHandler+0x1d4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <HAL_DMA_IRQHandler+0x1d8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_DMA_IRQHandler+0x1dc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_DMA_IRQHandler+0x1e0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_DMA_IRQHandler+0x1e4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_DMA_IRQHandler+0x1e8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_DMA_IRQHandler+0x1ec>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x194>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d12f      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x1f4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	e02e      	b.n	800200c <HAL_DMA_IRQHandler+0x208>
 8001fae:	bf00      	nop
 8001fb0:	24000000 	.word	0x24000000
 8001fb4:	1b4e81b5 	.word	0x1b4e81b5
 8001fb8:	40020010 	.word	0x40020010
 8001fbc:	40020028 	.word	0x40020028
 8001fc0:	40020040 	.word	0x40020040
 8001fc4:	40020058 	.word	0x40020058
 8001fc8:	40020070 	.word	0x40020070
 8001fcc:	40020088 	.word	0x40020088
 8001fd0:	400200a0 	.word	0x400200a0
 8001fd4:	400200b8 	.word	0x400200b8
 8001fd8:	40020410 	.word	0x40020410
 8001fdc:	40020428 	.word	0x40020428
 8001fe0:	40020440 	.word	0x40020440
 8001fe4:	40020458 	.word	0x40020458
 8001fe8:	40020470 	.word	0x40020470
 8001fec:	40020488 	.word	0x40020488
 8001ff0:	400204a0 	.word	0x400204a0
 8001ff4:	400204b8 	.word	0x400204b8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d015      	beq.n	800203c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2208      	movs	r2, #8
 800202a:	409a      	lsls	r2, r3
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d06e      	beq.n	8002130 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a69      	ldr	r2, [pc, #420]	; (80021fc <HAL_DMA_IRQHandler+0x3f8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04a      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_DMA_IRQHandler+0x3fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d045      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a66      	ldr	r2, [pc, #408]	; (8002204 <HAL_DMA_IRQHandler+0x400>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d040      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a64      	ldr	r2, [pc, #400]	; (8002208 <HAL_DMA_IRQHandler+0x404>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d03b      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a63      	ldr	r2, [pc, #396]	; (800220c <HAL_DMA_IRQHandler+0x408>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d036      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a61      	ldr	r2, [pc, #388]	; (8002210 <HAL_DMA_IRQHandler+0x40c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d031      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a60      	ldr	r2, [pc, #384]	; (8002214 <HAL_DMA_IRQHandler+0x410>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d02c      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a5e      	ldr	r2, [pc, #376]	; (8002218 <HAL_DMA_IRQHandler+0x414>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d027      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a5d      	ldr	r2, [pc, #372]	; (800221c <HAL_DMA_IRQHandler+0x418>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d022      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5b      	ldr	r2, [pc, #364]	; (8002220 <HAL_DMA_IRQHandler+0x41c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01d      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_DMA_IRQHandler+0x420>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d018      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_DMA_IRQHandler+0x424>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a57      	ldr	r2, [pc, #348]	; (800222c <HAL_DMA_IRQHandler+0x428>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a55      	ldr	r2, [pc, #340]	; (8002230 <HAL_DMA_IRQHandler+0x42c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a54      	ldr	r2, [pc, #336]	; (8002234 <HAL_DMA_IRQHandler+0x430>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2ee>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_DMA_IRQHandler+0x434>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10a      	bne.n	8002108 <HAL_DMA_IRQHandler+0x304>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e003      	b.n	8002110 <HAL_DMA_IRQHandler+0x30c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2201      	movs	r2, #1
 800211e:	409a      	lsls	r2, r3
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2204      	movs	r2, #4
 800213a:	409a      	lsls	r2, r3
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 808f 	beq.w	8002264 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <HAL_DMA_IRQHandler+0x3f8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d04a      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <HAL_DMA_IRQHandler+0x3fc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d045      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_DMA_IRQHandler+0x400>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d040      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_DMA_IRQHandler+0x404>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a26      	ldr	r2, [pc, #152]	; (800220c <HAL_DMA_IRQHandler+0x408>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d036      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_DMA_IRQHandler+0x40c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_DMA_IRQHandler+0x410>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02c      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_DMA_IRQHandler+0x414>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_DMA_IRQHandler+0x418>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <HAL_DMA_IRQHandler+0x41c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01d      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_DMA_IRQHandler+0x420>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d018      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_DMA_IRQHandler+0x424>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1a      	ldr	r2, [pc, #104]	; (800222c <HAL_DMA_IRQHandler+0x428>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_DMA_IRQHandler+0x42c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_DMA_IRQHandler+0x430>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3e2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <HAL_DMA_IRQHandler+0x434>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12a      	bne.n	800223c <HAL_DMA_IRQHandler+0x438>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e023      	b.n	8002244 <HAL_DMA_IRQHandler+0x440>
 80021fc:	40020010 	.word	0x40020010
 8002200:	40020028 	.word	0x40020028
 8002204:	40020040 	.word	0x40020040
 8002208:	40020058 	.word	0x40020058
 800220c:	40020070 	.word	0x40020070
 8002210:	40020088 	.word	0x40020088
 8002214:	400200a0 	.word	0x400200a0
 8002218:	400200b8 	.word	0x400200b8
 800221c:	40020410 	.word	0x40020410
 8002220:	40020428 	.word	0x40020428
 8002224:	40020440 	.word	0x40020440
 8002228:	40020458 	.word	0x40020458
 800222c:	40020470 	.word	0x40020470
 8002230:	40020488 	.word	0x40020488
 8002234:	400204a0 	.word	0x400204a0
 8002238:	400204b8 	.word	0x400204b8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2204      	movs	r2, #4
 8002252:	409a      	lsls	r2, r3
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2210      	movs	r2, #16
 800226e:	409a      	lsls	r2, r3
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a6 	beq.w	80023c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a85      	ldr	r2, [pc, #532]	; (8002494 <HAL_DMA_IRQHandler+0x690>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d04a      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a83      	ldr	r2, [pc, #524]	; (8002498 <HAL_DMA_IRQHandler+0x694>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d045      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a82      	ldr	r2, [pc, #520]	; (800249c <HAL_DMA_IRQHandler+0x698>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d040      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a80      	ldr	r2, [pc, #512]	; (80024a0 <HAL_DMA_IRQHandler+0x69c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d03b      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7f      	ldr	r2, [pc, #508]	; (80024a4 <HAL_DMA_IRQHandler+0x6a0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d036      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7d      	ldr	r2, [pc, #500]	; (80024a8 <HAL_DMA_IRQHandler+0x6a4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d031      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7c      	ldr	r2, [pc, #496]	; (80024ac <HAL_DMA_IRQHandler+0x6a8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d02c      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7a      	ldr	r2, [pc, #488]	; (80024b0 <HAL_DMA_IRQHandler+0x6ac>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d027      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a79      	ldr	r2, [pc, #484]	; (80024b4 <HAL_DMA_IRQHandler+0x6b0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <HAL_DMA_IRQHandler+0x6b4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01d      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a76      	ldr	r2, [pc, #472]	; (80024bc <HAL_DMA_IRQHandler+0x6b8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d018      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a74      	ldr	r2, [pc, #464]	; (80024c0 <HAL_DMA_IRQHandler+0x6bc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a73      	ldr	r2, [pc, #460]	; (80024c4 <HAL_DMA_IRQHandler+0x6c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00e      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a71      	ldr	r2, [pc, #452]	; (80024c8 <HAL_DMA_IRQHandler+0x6c4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a70      	ldr	r2, [pc, #448]	; (80024cc <HAL_DMA_IRQHandler+0x6c8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_DMA_IRQHandler+0x516>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_DMA_IRQHandler+0x6cc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10a      	bne.n	8002330 <HAL_DMA_IRQHandler+0x52c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e009      	b.n	8002344 <HAL_DMA_IRQHandler+0x540>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03e      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2210      	movs	r2, #16
 8002352:	409a      	lsls	r2, r3
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d018      	beq.n	8002398 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d108      	bne.n	8002386 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	d024      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
 8002384:	e01f      	b.n	80023c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01b      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
 8002396:	e016      	b.n	80023c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0208 	bic.w	r2, r2, #8
 80023b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2220      	movs	r2, #32
 80023d0:	409a      	lsls	r2, r3
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8110 	beq.w	80025fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <HAL_DMA_IRQHandler+0x690>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d04a      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <HAL_DMA_IRQHandler+0x694>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d045      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_DMA_IRQHandler+0x698>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d040      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_DMA_IRQHandler+0x69c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d03b      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_DMA_IRQHandler+0x6a0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d036      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <HAL_DMA_IRQHandler+0x6a4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d031      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_DMA_IRQHandler+0x6a8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d02c      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_DMA_IRQHandler+0x6ac>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d027      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <HAL_DMA_IRQHandler+0x6b0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d022      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_DMA_IRQHandler+0x6b4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d01d      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_DMA_IRQHandler+0x6b8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d018      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <HAL_DMA_IRQHandler+0x6bc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_DMA_IRQHandler+0x6c0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_DMA_IRQHandler+0x6c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_DMA_IRQHandler+0x6c8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_DMA_IRQHandler+0x678>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_DMA_IRQHandler+0x6cc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d12b      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x6d0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e02a      	b.n	80024e8 <HAL_DMA_IRQHandler+0x6e4>
 8002492:	bf00      	nop
 8002494:	40020010 	.word	0x40020010
 8002498:	40020028 	.word	0x40020028
 800249c:	40020040 	.word	0x40020040
 80024a0:	40020058 	.word	0x40020058
 80024a4:	40020070 	.word	0x40020070
 80024a8:	40020088 	.word	0x40020088
 80024ac:	400200a0 	.word	0x400200a0
 80024b0:	400200b8 	.word	0x400200b8
 80024b4:	40020410 	.word	0x40020410
 80024b8:	40020428 	.word	0x40020428
 80024bc:	40020440 	.word	0x40020440
 80024c0:	40020458 	.word	0x40020458
 80024c4:	40020470 	.word	0x40020470
 80024c8:	40020488 	.word	0x40020488
 80024cc:	400204a0 	.word	0x400204a0
 80024d0:	400204b8 	.word	0x400204b8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8087 	beq.w	80025fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2220      	movs	r2, #32
 80024f8:	409a      	lsls	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b04      	cmp	r3, #4
 8002508:	d139      	bne.n	800257e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0216 	bic.w	r2, r2, #22
 8002518:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002528:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_DMA_IRQHandler+0x736>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0208 	bic.w	r2, r2, #8
 8002548:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	223f      	movs	r2, #63	; 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 834a 	beq.w	8002c08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
          }
          return;
 800257c:	e344      	b.n	8002c08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d018      	beq.n	80025be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d108      	bne.n	80025ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02c      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
 80025aa:	e027      	b.n	80025fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
 80025bc:	e01e      	b.n	80025fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0210 	bic.w	r2, r2, #16
 80025da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8306 	beq.w	8002c12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8088 	beq.w	8002724 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2204      	movs	r2, #4
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_DMA_IRQHandler+0xa08>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04a      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a79      	ldr	r2, [pc, #484]	; (8002810 <HAL_DMA_IRQHandler+0xa0c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d045      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_DMA_IRQHandler+0xa10>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a76      	ldr	r2, [pc, #472]	; (8002818 <HAL_DMA_IRQHandler+0xa14>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d03b      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a74      	ldr	r2, [pc, #464]	; (800281c <HAL_DMA_IRQHandler+0xa18>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d036      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a73      	ldr	r2, [pc, #460]	; (8002820 <HAL_DMA_IRQHandler+0xa1c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a71      	ldr	r2, [pc, #452]	; (8002824 <HAL_DMA_IRQHandler+0xa20>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02c      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a70      	ldr	r2, [pc, #448]	; (8002828 <HAL_DMA_IRQHandler+0xa24>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d027      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_DMA_IRQHandler+0xa28>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6d      	ldr	r2, [pc, #436]	; (8002830 <HAL_DMA_IRQHandler+0xa2c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6b      	ldr	r2, [pc, #428]	; (8002834 <HAL_DMA_IRQHandler+0xa30>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <HAL_DMA_IRQHandler+0xa34>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a68      	ldr	r2, [pc, #416]	; (800283c <HAL_DMA_IRQHandler+0xa38>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a67      	ldr	r2, [pc, #412]	; (8002840 <HAL_DMA_IRQHandler+0xa3c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a65      	ldr	r2, [pc, #404]	; (8002844 <HAL_DMA_IRQHandler+0xa40>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_IRQHandler+0x8b8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a64      	ldr	r2, [pc, #400]	; (8002848 <HAL_DMA_IRQHandler+0xa44>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <HAL_DMA_IRQHandler+0x8ca>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e007      	b.n	80026de <HAL_DMA_IRQHandler+0x8da>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d307      	bcc.n	80026fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f2      	bne.n	80026de <HAL_DMA_IRQHandler+0x8da>
 80026f8:	e000      	b.n	80026fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80026fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002712:	e003      	b.n	800271c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8272 	beq.w	8002c12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
 8002736:	e26c      	b.n	8002c12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a43      	ldr	r2, [pc, #268]	; (800284c <HAL_DMA_IRQHandler+0xa48>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d022      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_DMA_IRQHandler+0xa4c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d01d      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a40      	ldr	r2, [pc, #256]	; (8002854 <HAL_DMA_IRQHandler+0xa50>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d018      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_DMA_IRQHandler+0xa54>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d013      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3d      	ldr	r2, [pc, #244]	; (800285c <HAL_DMA_IRQHandler+0xa58>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00e      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_DMA_IRQHandler+0xa5c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_DMA_IRQHandler+0xa60>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_DMA_IRQHandler+0x984>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a39      	ldr	r2, [pc, #228]	; (8002868 <HAL_DMA_IRQHandler+0xa64>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_DMA_IRQHandler+0x988>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_DMA_IRQHandler+0x98a>
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 823f 	beq.w	8002c12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2204      	movs	r2, #4
 80027a6:	409a      	lsls	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80cd 	beq.w	800294c <HAL_DMA_IRQHandler+0xb48>
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80c7 	beq.w	800294c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2204      	movs	r2, #4
 80027c8:	409a      	lsls	r2, r3
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d049      	beq.n	800286c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8210 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027f4:	e20a      	b.n	8002c0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8206 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002808:	e200      	b.n	8002c0c <HAL_DMA_IRQHandler+0xe08>
 800280a:	bf00      	nop
 800280c:	40020010 	.word	0x40020010
 8002810:	40020028 	.word	0x40020028
 8002814:	40020040 	.word	0x40020040
 8002818:	40020058 	.word	0x40020058
 800281c:	40020070 	.word	0x40020070
 8002820:	40020088 	.word	0x40020088
 8002824:	400200a0 	.word	0x400200a0
 8002828:	400200b8 	.word	0x400200b8
 800282c:	40020410 	.word	0x40020410
 8002830:	40020428 	.word	0x40020428
 8002834:	40020440 	.word	0x40020440
 8002838:	40020458 	.word	0x40020458
 800283c:	40020470 	.word	0x40020470
 8002840:	40020488 	.word	0x40020488
 8002844:	400204a0 	.word	0x400204a0
 8002848:	400204b8 	.word	0x400204b8
 800284c:	58025408 	.word	0x58025408
 8002850:	5802541c 	.word	0x5802541c
 8002854:	58025430 	.word	0x58025430
 8002858:	58025444 	.word	0x58025444
 800285c:	58025458 	.word	0x58025458
 8002860:	5802546c 	.word	0x5802546c
 8002864:	58025480 	.word	0x58025480
 8002868:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d160      	bne.n	8002938 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8c      	ldr	r2, [pc, #560]	; (8002aac <HAL_DMA_IRQHandler+0xca8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d04a      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a8a      	ldr	r2, [pc, #552]	; (8002ab0 <HAL_DMA_IRQHandler+0xcac>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d045      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a89      	ldr	r2, [pc, #548]	; (8002ab4 <HAL_DMA_IRQHandler+0xcb0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d040      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_DMA_IRQHandler+0xcb4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d03b      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a86      	ldr	r2, [pc, #536]	; (8002abc <HAL_DMA_IRQHandler+0xcb8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d036      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a84      	ldr	r2, [pc, #528]	; (8002ac0 <HAL_DMA_IRQHandler+0xcbc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d031      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a83      	ldr	r2, [pc, #524]	; (8002ac4 <HAL_DMA_IRQHandler+0xcc0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d02c      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a81      	ldr	r2, [pc, #516]	; (8002ac8 <HAL_DMA_IRQHandler+0xcc4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d027      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a80      	ldr	r2, [pc, #512]	; (8002acc <HAL_DMA_IRQHandler+0xcc8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7e      	ldr	r2, [pc, #504]	; (8002ad0 <HAL_DMA_IRQHandler+0xccc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7d      	ldr	r2, [pc, #500]	; (8002ad4 <HAL_DMA_IRQHandler+0xcd0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7b      	ldr	r2, [pc, #492]	; (8002ad8 <HAL_DMA_IRQHandler+0xcd4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <HAL_DMA_IRQHandler+0xcd8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <HAL_DMA_IRQHandler+0xcdc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <HAL_DMA_IRQHandler+0xce0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_IRQHandler+0xb12>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_DMA_IRQHandler+0xce4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <HAL_DMA_IRQHandler+0xb24>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0208 	bic.w	r2, r2, #8
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <HAL_DMA_IRQHandler+0xb34>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0204 	bic.w	r2, r2, #4
 8002936:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8165 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800294a:	e15f      	b.n	8002c0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2202      	movs	r2, #2
 8002956:	409a      	lsls	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80c5 	beq.w	8002aec <HAL_DMA_IRQHandler+0xce8>
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80bf 	beq.w	8002aec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2202      	movs	r2, #2
 8002978:	409a      	lsls	r2, r3
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 813a 	beq.w	8002c10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029a4:	e134      	b.n	8002c10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8130 	beq.w	8002c10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029b8:	e12a      	b.n	8002c10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d168      	bne.n	8002a96 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a38      	ldr	r2, [pc, #224]	; (8002aac <HAL_DMA_IRQHandler+0xca8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d04a      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <HAL_DMA_IRQHandler+0xcac>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d045      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a35      	ldr	r2, [pc, #212]	; (8002ab4 <HAL_DMA_IRQHandler+0xcb0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d040      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_DMA_IRQHandler+0xcb4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d03b      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a32      	ldr	r2, [pc, #200]	; (8002abc <HAL_DMA_IRQHandler+0xcb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d036      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_DMA_IRQHandler+0xcbc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d031      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <HAL_DMA_IRQHandler+0xcc0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02c      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_DMA_IRQHandler+0xcc4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d027      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <HAL_DMA_IRQHandler+0xcc8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d022      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_DMA_IRQHandler+0xccc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d01d      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a29      	ldr	r2, [pc, #164]	; (8002ad4 <HAL_DMA_IRQHandler+0xcd0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d018      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_DMA_IRQHandler+0xcd4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a26      	ldr	r2, [pc, #152]	; (8002adc <HAL_DMA_IRQHandler+0xcd8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00e      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DMA_IRQHandler+0xcdc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d009      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <HAL_DMA_IRQHandler+0xce0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xc60>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_IRQHandler+0xce4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d108      	bne.n	8002a76 <HAL_DMA_IRQHandler+0xc72>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0214 	bic.w	r2, r2, #20
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_DMA_IRQHandler+0xc82>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 020a 	bic.w	r2, r2, #10
 8002a84:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80b8 	beq.w	8002c10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aa8:	e0b2      	b.n	8002c10 <HAL_DMA_IRQHandler+0xe0c>
 8002aaa:	bf00      	nop
 8002aac:	40020010 	.word	0x40020010
 8002ab0:	40020028 	.word	0x40020028
 8002ab4:	40020040 	.word	0x40020040
 8002ab8:	40020058 	.word	0x40020058
 8002abc:	40020070 	.word	0x40020070
 8002ac0:	40020088 	.word	0x40020088
 8002ac4:	400200a0 	.word	0x400200a0
 8002ac8:	400200b8 	.word	0x400200b8
 8002acc:	40020410 	.word	0x40020410
 8002ad0:	40020428 	.word	0x40020428
 8002ad4:	40020440 	.word	0x40020440
 8002ad8:	40020458 	.word	0x40020458
 8002adc:	40020470 	.word	0x40020470
 8002ae0:	40020488 	.word	0x40020488
 8002ae4:	400204a0 	.word	0x400204a0
 8002ae8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2208      	movs	r2, #8
 8002af6:	409a      	lsls	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8088 	beq.w	8002c12 <HAL_DMA_IRQHandler+0xe0e>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8082 	beq.w	8002c12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <HAL_DMA_IRQHandler+0xe14>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d04a      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a3f      	ldr	r2, [pc, #252]	; (8002c1c <HAL_DMA_IRQHandler+0xe18>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d045      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a3e      	ldr	r2, [pc, #248]	; (8002c20 <HAL_DMA_IRQHandler+0xe1c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d040      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <HAL_DMA_IRQHandler+0xe20>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d03b      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_DMA_IRQHandler+0xe24>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d036      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <HAL_DMA_IRQHandler+0xe28>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d031      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_DMA_IRQHandler+0xe2c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d02c      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <HAL_DMA_IRQHandler+0xe30>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d027      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <HAL_DMA_IRQHandler+0xe34>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <HAL_DMA_IRQHandler+0xe38>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_DMA_IRQHandler+0xe3c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <HAL_DMA_IRQHandler+0xe40>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2f      	ldr	r2, [pc, #188]	; (8002c48 <HAL_DMA_IRQHandler+0xe44>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <HAL_DMA_IRQHandler+0xe48>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <HAL_DMA_IRQHandler+0xe4c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdaa>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <HAL_DMA_IRQHandler+0xe50>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0xdbc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 021c 	bic.w	r2, r2, #28
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e007      	b.n	8002bd0 <HAL_DMA_IRQHandler+0xdcc>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 020e 	bic.w	r2, r2, #14
 8002bce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e004      	b.n	8002c12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40020010 	.word	0x40020010
 8002c1c:	40020028 	.word	0x40020028
 8002c20:	40020040 	.word	0x40020040
 8002c24:	40020058 	.word	0x40020058
 8002c28:	40020070 	.word	0x40020070
 8002c2c:	40020088 	.word	0x40020088
 8002c30:	400200a0 	.word	0x400200a0
 8002c34:	400200b8 	.word	0x400200b8
 8002c38:	40020410 	.word	0x40020410
 8002c3c:	40020428 	.word	0x40020428
 8002c40:	40020440 	.word	0x40020440
 8002c44:	40020458 	.word	0x40020458
 8002c48:	40020470 	.word	0x40020470
 8002c4c:	40020488 	.word	0x40020488
 8002c50:	400204a0 	.word	0x400204a0
 8002c54:	400204b8 	.word	0x400204b8

08002c58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a84      	ldr	r2, [pc, #528]	; (8002e88 <DMA_SetConfig+0x230>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d072      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a82      	ldr	r2, [pc, #520]	; (8002e8c <DMA_SetConfig+0x234>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d06d      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a81      	ldr	r2, [pc, #516]	; (8002e90 <DMA_SetConfig+0x238>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d068      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a7f      	ldr	r2, [pc, #508]	; (8002e94 <DMA_SetConfig+0x23c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d063      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	; (8002e98 <DMA_SetConfig+0x240>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d05e      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7c      	ldr	r2, [pc, #496]	; (8002e9c <DMA_SetConfig+0x244>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d059      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	; (8002ea0 <DMA_SetConfig+0x248>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d054      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a79      	ldr	r2, [pc, #484]	; (8002ea4 <DMA_SetConfig+0x24c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04f      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a78      	ldr	r2, [pc, #480]	; (8002ea8 <DMA_SetConfig+0x250>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d04a      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a76      	ldr	r2, [pc, #472]	; (8002eac <DMA_SetConfig+0x254>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d045      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <DMA_SetConfig+0x258>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d040      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a73      	ldr	r2, [pc, #460]	; (8002eb4 <DMA_SetConfig+0x25c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d03b      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <DMA_SetConfig+0x260>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d036      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a70      	ldr	r2, [pc, #448]	; (8002ebc <DMA_SetConfig+0x264>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d031      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <DMA_SetConfig+0x268>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d02c      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6d      	ldr	r2, [pc, #436]	; (8002ec4 <DMA_SetConfig+0x26c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d027      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6c      	ldr	r2, [pc, #432]	; (8002ec8 <DMA_SetConfig+0x270>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d022      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <DMA_SetConfig+0x274>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01d      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <DMA_SetConfig+0x278>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d018      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <DMA_SetConfig+0x27c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a66      	ldr	r2, [pc, #408]	; (8002ed8 <DMA_SetConfig+0x280>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00e      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a64      	ldr	r2, [pc, #400]	; (8002edc <DMA_SetConfig+0x284>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a63      	ldr	r2, [pc, #396]	; (8002ee0 <DMA_SetConfig+0x288>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <DMA_SetConfig+0x10a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <DMA_SetConfig+0x28c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <DMA_SetConfig+0x10e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <DMA_SetConfig+0x110>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a3e      	ldr	r2, [pc, #248]	; (8002e88 <DMA_SetConfig+0x230>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04a      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3d      	ldr	r2, [pc, #244]	; (8002e8c <DMA_SetConfig+0x234>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d045      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <DMA_SetConfig+0x238>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d040      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <DMA_SetConfig+0x23c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03b      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a38      	ldr	r2, [pc, #224]	; (8002e98 <DMA_SetConfig+0x240>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d036      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a37      	ldr	r2, [pc, #220]	; (8002e9c <DMA_SetConfig+0x244>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d031      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <DMA_SetConfig+0x248>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02c      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <DMA_SetConfig+0x24c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d027      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <DMA_SetConfig+0x250>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a31      	ldr	r2, [pc, #196]	; (8002eac <DMA_SetConfig+0x254>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <DMA_SetConfig+0x258>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <DMA_SetConfig+0x25c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <DMA_SetConfig+0x260>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <DMA_SetConfig+0x264>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <DMA_SetConfig+0x268>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <DMA_SetConfig+0x1d0>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <DMA_SetConfig+0x26c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <DMA_SetConfig+0x1d4>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <DMA_SetConfig+0x1d6>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d05a      	beq.n	8002ee8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	223f      	movs	r2, #63	; 0x3f
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d108      	bne.n	8002e74 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e72:	e087      	b.n	8002f84 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	e07e      	b.n	8002f84 <DMA_SetConfig+0x32c>
 8002e86:	bf00      	nop
 8002e88:	40020010 	.word	0x40020010
 8002e8c:	40020028 	.word	0x40020028
 8002e90:	40020040 	.word	0x40020040
 8002e94:	40020058 	.word	0x40020058
 8002e98:	40020070 	.word	0x40020070
 8002e9c:	40020088 	.word	0x40020088
 8002ea0:	400200a0 	.word	0x400200a0
 8002ea4:	400200b8 	.word	0x400200b8
 8002ea8:	40020410 	.word	0x40020410
 8002eac:	40020428 	.word	0x40020428
 8002eb0:	40020440 	.word	0x40020440
 8002eb4:	40020458 	.word	0x40020458
 8002eb8:	40020470 	.word	0x40020470
 8002ebc:	40020488 	.word	0x40020488
 8002ec0:	400204a0 	.word	0x400204a0
 8002ec4:	400204b8 	.word	0x400204b8
 8002ec8:	58025408 	.word	0x58025408
 8002ecc:	5802541c 	.word	0x5802541c
 8002ed0:	58025430 	.word	0x58025430
 8002ed4:	58025444 	.word	0x58025444
 8002ed8:	58025458 	.word	0x58025458
 8002edc:	5802546c 	.word	0x5802546c
 8002ee0:	58025480 	.word	0x58025480
 8002ee4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <DMA_SetConfig+0x338>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <DMA_SetConfig+0x33c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <DMA_SetConfig+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <DMA_SetConfig+0x344>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <DMA_SetConfig+0x348>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <DMA_SetConfig+0x34c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <DMA_SetConfig+0x350>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <DMA_SetConfig+0x2e0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <DMA_SetConfig+0x354>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <DMA_SetConfig+0x2e4>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <DMA_SetConfig+0x2e6>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d020      	beq.n	8002f84 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d108      	bne.n	8002f74 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	60da      	str	r2, [r3, #12]
}
 8002f72:	e007      	b.n	8002f84 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	58025408 	.word	0x58025408
 8002f94:	5802541c 	.word	0x5802541c
 8002f98:	58025430 	.word	0x58025430
 8002f9c:	58025444 	.word	0x58025444
 8002fa0:	58025458 	.word	0x58025458
 8002fa4:	5802546c 	.word	0x5802546c
 8002fa8:	58025480 	.word	0x58025480
 8002fac:	58025494 	.word	0x58025494

08002fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <DMA_CalcBaseAndBitshift+0x118>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a41      	ldr	r2, [pc, #260]	; (80030cc <DMA_CalcBaseAndBitshift+0x11c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3f      	ldr	r2, [pc, #252]	; (80030d0 <DMA_CalcBaseAndBitshift+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a3e      	ldr	r2, [pc, #248]	; (80030d4 <DMA_CalcBaseAndBitshift+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a3c      	ldr	r2, [pc, #240]	; (80030d8 <DMA_CalcBaseAndBitshift+0x128>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <DMA_CalcBaseAndBitshift+0x12c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <DMA_CalcBaseAndBitshift+0x130>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <DMA_CalcBaseAndBitshift+0x134>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <DMA_CalcBaseAndBitshift+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a35      	ldr	r2, [pc, #212]	; (80030ec <DMA_CalcBaseAndBitshift+0x13c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <DMA_CalcBaseAndBitshift+0x140>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <DMA_CalcBaseAndBitshift+0x144>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <DMA_CalcBaseAndBitshift+0x148>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <DMA_CalcBaseAndBitshift+0x14c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <DMA_CalcBaseAndBitshift+0x150>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <DMA_CalcBaseAndBitshift+0x154>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <DMA_CalcBaseAndBitshift+0xac>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <DMA_CalcBaseAndBitshift+0xae>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d024      	beq.n	80030ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3b10      	subs	r3, #16
 800306a:	4a27      	ldr	r2, [pc, #156]	; (8003108 <DMA_CalcBaseAndBitshift+0x158>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	4a24      	ldr	r2, [pc, #144]	; (800310c <DMA_CalcBaseAndBitshift+0x15c>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d908      	bls.n	800309c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <DMA_CalcBaseAndBitshift+0x160>)
 8003092:	4013      	ands	r3, r2
 8003094:	1d1a      	adds	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58
 800309a:	e00d      	b.n	80030b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <DMA_CalcBaseAndBitshift+0x160>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
 80030aa:	e005      	b.n	80030b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	aaaaaaab 	.word	0xaaaaaaab
 800310c:	080056d8 	.word	0x080056d8
 8003110:	fffffc00 	.word	0xfffffc00

08003114 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d120      	bne.n	800316a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	2b03      	cmp	r3, #3
 800312e:	d858      	bhi.n	80031e2 <DMA_CheckFifoParam+0xce>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <DMA_CheckFifoParam+0x24>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	0800315b 	.word	0x0800315b
 8003140:	08003149 	.word	0x08003149
 8003144:	080031e3 	.word	0x080031e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d048      	beq.n	80031e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003158:	e045      	b.n	80031e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003162:	d142      	bne.n	80031ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003168:	e03f      	b.n	80031ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003172:	d123      	bne.n	80031bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b03      	cmp	r3, #3
 800317a:	d838      	bhi.n	80031ee <DMA_CheckFifoParam+0xda>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <DMA_CheckFifoParam+0x70>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003195 	.word	0x08003195
 8003188:	0800319b 	.word	0x0800319b
 800318c:	08003195 	.word	0x08003195
 8003190:	080031ad 	.word	0x080031ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
        break;
 8003198:	e030      	b.n	80031fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d025      	beq.n	80031f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031aa:	e022      	b.n	80031f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b4:	d11f      	bne.n	80031f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ba:	e01c      	b.n	80031f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d902      	bls.n	80031ca <DMA_CheckFifoParam+0xb6>
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80031c8:	e018      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
        break;
 80031ce:	e015      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
    break;
 80031e0:	e00b      	b.n	80031fa <DMA_CheckFifoParam+0xe6>
        break;
 80031e2:	bf00      	nop
 80031e4:	e00a      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031e6:	bf00      	nop
 80031e8:	e008      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031ea:	bf00      	nop
 80031ec:	e006      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
    break;
 80031fa:	bf00      	nop
    }
  }

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a38      	ldr	r2, [pc, #224]	; (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a36      	ldr	r2, [pc, #216]	; (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a35      	ldr	r2, [pc, #212]	; (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a33      	ldr	r2, [pc, #204]	; (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a32      	ldr	r2, [pc, #200]	; (8003310 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a30      	ldr	r2, [pc, #192]	; (8003314 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2f      	ldr	r2, [pc, #188]	; (8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2d      	ldr	r2, [pc, #180]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01a      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3b08      	subs	r3, #8
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a24      	ldr	r2, [pc, #144]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003298:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032a8:	e024      	b.n	80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3b10      	subs	r3, #16
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d806      	bhi.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d902      	bls.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3308      	adds	r3, #8
 80032d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80032e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	58025408 	.word	0x58025408
 8003304:	5802541c 	.word	0x5802541c
 8003308:	58025430 	.word	0x58025430
 800330c:	58025444 	.word	0x58025444
 8003310:	58025458 	.word	0x58025458
 8003314:	5802546c 	.word	0x5802546c
 8003318:	58025480 	.word	0x58025480
 800331c:	58025494 	.word	0x58025494
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	16009600 	.word	0x16009600
 8003328:	58025880 	.word	0x58025880
 800332c:	aaaaaaab 	.word	0xaaaaaaab
 8003330:	400204b8 	.word	0x400204b8
 8003334:	4002040f 	.word	0x4002040f
 8003338:	10008200 	.word	0x10008200
 800333c:	40020880 	.word	0x40020880

08003340 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d04a      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d847      	bhi.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1e      	ldr	r2, [pc, #120]	; (800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80033c8:	671a      	str	r2, [r3, #112]	; 0x70
 80033ca:	e009      	b.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a11      	ldr	r2, [pc, #68]	; (8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80033de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	58025408 	.word	0x58025408
 80033fc:	5802541c 	.word	0x5802541c
 8003400:	58025430 	.word	0x58025430
 8003404:	58025444 	.word	0x58025444
 8003408:	58025458 	.word	0x58025458
 800340c:	5802546c 	.word	0x5802546c
 8003410:	58025480 	.word	0x58025480
 8003414:	58025494 	.word	0x58025494
 8003418:	1600963f 	.word	0x1600963f
 800341c:	58025940 	.word	0x58025940
 8003420:	1000823f 	.word	0x1000823f
 8003424:	40020940 	.word	0x40020940

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003436:	4b89      	ldr	r3, [pc, #548]	; (800365c <HAL_GPIO_Init+0x234>)
 8003438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800343a:	e194      	b.n	8003766 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8186 	beq.w	8003760 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d005      	beq.n	800346c <HAL_GPIO_Init+0x44>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d130      	bne.n	80034ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	2203      	movs	r2, #3
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034a2:	2201      	movs	r2, #1
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f003 0201 	and.w	r2, r3, #1
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d017      	beq.n	800350a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d123      	bne.n	800355e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	08da      	lsrs	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3208      	adds	r2, #8
 800351e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	08da      	lsrs	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3208      	adds	r2, #8
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0203 	and.w	r2, r3, #3
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80e0 	beq.w	8003760 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_GPIO_Init+0x238>)
 80035a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035a6:	4a2e      	ldr	r2, [pc, #184]	; (8003660 <HAL_GPIO_Init+0x238>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035b0:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <HAL_GPIO_Init+0x238>)
 80035b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_GPIO_Init+0x23c>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <HAL_GPIO_Init+0x240>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d052      	beq.n	8003690 <HAL_GPIO_Init+0x268>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1f      	ldr	r2, [pc, #124]	; (800366c <HAL_GPIO_Init+0x244>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d031      	beq.n	8003656 <HAL_GPIO_Init+0x22e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <HAL_GPIO_Init+0x248>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02b      	beq.n	8003652 <HAL_GPIO_Init+0x22a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_GPIO_Init+0x24c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d025      	beq.n	800364e <HAL_GPIO_Init+0x226>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_GPIO_Init+0x250>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01f      	beq.n	800364a <HAL_GPIO_Init+0x222>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_GPIO_Init+0x254>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d019      	beq.n	8003646 <HAL_GPIO_Init+0x21e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_GPIO_Init+0x258>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_GPIO_Init+0x21a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_GPIO_Init+0x25c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00d      	beq.n	800363e <HAL_GPIO_Init+0x216>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_GPIO_Init+0x260>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <HAL_GPIO_Init+0x212>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_GPIO_Init+0x264>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_GPIO_Init+0x20e>
 8003632:	2309      	movs	r3, #9
 8003634:	e02d      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 8003636:	230a      	movs	r3, #10
 8003638:	e02b      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 800363a:	2308      	movs	r3, #8
 800363c:	e029      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 800363e:	2307      	movs	r3, #7
 8003640:	e027      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 8003642:	2306      	movs	r3, #6
 8003644:	e025      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 8003646:	2305      	movs	r3, #5
 8003648:	e023      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 800364a:	2304      	movs	r3, #4
 800364c:	e021      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 800364e:	2303      	movs	r3, #3
 8003650:	e01f      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 8003652:	2302      	movs	r3, #2
 8003654:	e01d      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 8003656:	2301      	movs	r3, #1
 8003658:	e01b      	b.n	8003692 <HAL_GPIO_Init+0x26a>
 800365a:	bf00      	nop
 800365c:	58000080 	.word	0x58000080
 8003660:	58024400 	.word	0x58024400
 8003664:	58000400 	.word	0x58000400
 8003668:	58020000 	.word	0x58020000
 800366c:	58020400 	.word	0x58020400
 8003670:	58020800 	.word	0x58020800
 8003674:	58020c00 	.word	0x58020c00
 8003678:	58021000 	.word	0x58021000
 800367c:	58021400 	.word	0x58021400
 8003680:	58021800 	.word	0x58021800
 8003684:	58021c00 	.word	0x58021c00
 8003688:	58022000 	.word	0x58022000
 800368c:	58022400 	.word	0x58022400
 8003690:	2300      	movs	r3, #0
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f002 0203 	and.w	r2, r2, #3
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	4093      	lsls	r3, r2
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a2:	4938      	ldr	r1, [pc, #224]	; (8003784 <HAL_GPIO_Init+0x35c>)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	3301      	adds	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f ae63 	bne.w	800343c <HAL_GPIO_Init+0x14>
  }
}
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	3724      	adds	r7, #36	; 0x24
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	58000400 	.word	0x58000400

08003788 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d00a      	beq.n	80037b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e01f      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e01d      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	490f      	ldr	r1, [pc, #60]	; (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037c2:	f7fd f947 	bl	8000a54 <HAL_GetTick>
 80037c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037c8:	e009      	b.n	80037de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ca:	f7fd f943 	bl	8000a54 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d8:	d901      	bls.n	80037de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e007      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ea:	d1ee      	bne.n	80037ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	58024800 	.word	0x58024800

080037fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	; 0x30
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f000 bc1c 	b.w	8004048 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8087 	beq.w	800392c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4b9e      	ldr	r3, [pc, #632]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003828:	4b9b      	ldr	r3, [pc, #620]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b10      	cmp	r3, #16
 8003832:	d007      	beq.n	8003844 <HAL_RCC_OscConfig+0x48>
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2b18      	cmp	r3, #24
 8003838:	d110      	bne.n	800385c <HAL_RCC_OscConfig+0x60>
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b94      	ldr	r3, [pc, #592]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d06c      	beq.n	800392a <HAL_RCC_OscConfig+0x12e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d168      	bne.n	800392a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e3f5      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x78>
 8003866:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a8b      	ldr	r2, [pc, #556]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e02e      	b.n	80038d2 <HAL_RCC_OscConfig+0xd6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x9a>
 800387c:	4b86      	ldr	r3, [pc, #536]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a85      	ldr	r2, [pc, #532]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a82      	ldr	r2, [pc, #520]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800388e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e01d      	b.n	80038d2 <HAL_RCC_OscConfig+0xd6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0xbe>
 80038a0:	4b7d      	ldr	r3, [pc, #500]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7c      	ldr	r2, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b7a      	ldr	r3, [pc, #488]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a79      	ldr	r2, [pc, #484]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e00b      	b.n	80038d2 <HAL_RCC_OscConfig+0xd6>
 80038ba:	4b77      	ldr	r3, [pc, #476]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a76      	ldr	r2, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b74      	ldr	r3, [pc, #464]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd f8bb 	bl	8000a54 <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e2:	f7fd f8b7 	bl	8000a54 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e3a9      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038f4:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0xe6>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd f8a7 	bl	8000a54 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390a:	f7fd f8a3 	bl	8000a54 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	; 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e395      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x10e>
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ca 	beq.w	8003ace <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393a:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003942:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003944:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_RCC_OscConfig+0x164>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b18      	cmp	r3, #24
 8003954:	d156      	bne.n	8003a04 <HAL_RCC_OscConfig+0x208>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d151      	bne.n	8003a04 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003960:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_OscConfig+0x17c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e367      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003978:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 0219 	bic.w	r2, r3, #25
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4944      	ldr	r1, [pc, #272]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800398a:	f7fd f863 	bl	8000a54 <HAL_GetTick>
 800398e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7fd f85f 	bl	8000a54 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e351      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a4:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	f7fd f880 	bl	8000ab4 <HAL_GetREVID>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d817      	bhi.n	80039ee <HAL_RCC_OscConfig+0x1f2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_OscConfig+0x1dc>
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039ce:	4a32      	ldr	r2, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d6:	e07a      	b.n	8003ace <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d8:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	492c      	ldr	r1, [pc, #176]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ec:	e06f      	b.n	8003ace <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	4926      	ldr	r1, [pc, #152]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a02:	e064      	b.n	8003ace <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d047      	beq.n	8003a9c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 0219 	bic.w	r2, r3, #25
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	491f      	ldr	r1, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd f819 	bl	8000a54 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fd f815 	bl	8000a54 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e307      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	f7fd f836 	bl	8000ab4 <HAL_GetREVID>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d817      	bhi.n	8003a82 <HAL_RCC_OscConfig+0x286>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0x270>
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a62:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	6053      	str	r3, [r2, #4]
 8003a6a:	e030      	b.n	8003ace <HAL_RCC_OscConfig+0x2d2>
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	4907      	ldr	r1, [pc, #28]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
 8003a80:	e025      	b.n	8003ace <HAL_RCC_OscConfig+0x2d2>
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	4901      	ldr	r1, [pc, #4]	; (8003a98 <HAL_RCC_OscConfig+0x29c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
 8003a96:	e01a      	b.n	8003ace <HAL_RCC_OscConfig+0x2d2>
 8003a98:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9c:	4b9e      	ldr	r3, [pc, #632]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a9d      	ldr	r2, [pc, #628]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fc ffd4 	bl	8000a54 <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fc ffd0 	bl	8000a54 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e2c2      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ac2:	4b95      	ldr	r3, [pc, #596]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a9 	beq.w	8003c2e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003adc:	4b8e      	ldr	r3, [pc, #568]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ae4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae6:	4b8c      	ldr	r3, [pc, #560]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d007      	beq.n	8003b02 <HAL_RCC_OscConfig+0x306>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b18      	cmp	r3, #24
 8003af6:	d13a      	bne.n	8003b6e <HAL_RCC_OscConfig+0x372>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d135      	bne.n	8003b6e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b02:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_RCC_OscConfig+0x31e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e296      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b1a:	f7fc ffcb 	bl	8000ab4 <HAL_GetREVID>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d817      	bhi.n	8003b58 <HAL_RCC_OscConfig+0x35c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d108      	bne.n	8003b42 <HAL_RCC_OscConfig+0x346>
 8003b30:	4b79      	ldr	r3, [pc, #484]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b38:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b3e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b40:	e075      	b.n	8003c2e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b42:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	069b      	lsls	r3, r3, #26
 8003b50:	4971      	ldr	r1, [pc, #452]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b56:	e06a      	b.n	8003c2e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b58:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	496c      	ldr	r1, [pc, #432]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b6c:	e05f      	b.n	8003c2e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d042      	beq.n	8003bfc <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b76:	4b68      	ldr	r3, [pc, #416]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a67      	ldr	r2, [pc, #412]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fc ff67 	bl	8000a54 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b8a:	f7fc ff63 	bl	8000a54 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e255      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba8:	f7fc ff84 	bl	8000ab4 <HAL_GetREVID>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d817      	bhi.n	8003be6 <HAL_RCC_OscConfig+0x3ea>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d108      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x3d4>
 8003bbe:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bc6:	4a54      	ldr	r2, [pc, #336]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	6053      	str	r3, [r2, #4]
 8003bce:	e02e      	b.n	8003c2e <HAL_RCC_OscConfig+0x432>
 8003bd0:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	069b      	lsls	r3, r3, #26
 8003bde:	494e      	ldr	r1, [pc, #312]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	e023      	b.n	8003c2e <HAL_RCC_OscConfig+0x432>
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	4948      	ldr	r1, [pc, #288]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60cb      	str	r3, [r1, #12]
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a45      	ldr	r2, [pc, #276]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fc ff24 	bl	8000a54 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c10:	f7fc ff20 	bl	8000a54 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e212      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d036      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d019      	beq.n	8003c76 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	4a34      	ldr	r2, [pc, #208]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fc ff01 	bl	8000a54 <HAL_GetTick>
 8003c52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fc fefd 	bl	8000a54 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1ef      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c68:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x45a>
 8003c74:	e018      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c76:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fc fee7 	bl	8000a54 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fc fee3 	bl	8000a54 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e1d5      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d039      	beq.n	8003d28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d019      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cc8:	f7fc fec4 	bl	8000a54 <HAL_GetTick>
 8003ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cd0:	f7fc fec0 	bl	8000a54 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1b2      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4d4>
 8003cee:	e01b      	b.n	8003d28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_RCC_OscConfig+0x51c>)
 8003cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cfc:	f7fc feaa 	bl	8000a54 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d02:	e00b      	b.n	8003d1c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d04:	f7fc fea6 	bl	8000a54 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d904      	bls.n	8003d1c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e198      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
 8003d16:	bf00      	nop
 8003d18:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d1c:	4ba3      	ldr	r3, [pc, #652]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ed      	bne.n	8003d04 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8081 	beq.w	8003e38 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d36:	4b9e      	ldr	r3, [pc, #632]	; (8003fb0 <HAL_RCC_OscConfig+0x7b4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a9d      	ldr	r2, [pc, #628]	; (8003fb0 <HAL_RCC_OscConfig+0x7b4>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d42:	f7fc fe87 	bl	8000a54 <HAL_GetTick>
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d4a:	f7fc fe83 	bl	8000a54 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b64      	cmp	r3, #100	; 0x64
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e175      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d5c:	4b94      	ldr	r3, [pc, #592]	; (8003fb0 <HAL_RCC_OscConfig+0x7b4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x582>
 8003d70:	4b8e      	ldr	r3, [pc, #568]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a8d      	ldr	r2, [pc, #564]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	e02d      	b.n	8003dda <HAL_RCC_OscConfig+0x5de>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5a4>
 8003d86:	4b89      	ldr	r3, [pc, #548]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a88      	ldr	r2, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	4b86      	ldr	r3, [pc, #536]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a85      	ldr	r2, [pc, #532]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	e01c      	b.n	8003dda <HAL_RCC_OscConfig+0x5de>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5c6>
 8003da8:	4b80      	ldr	r3, [pc, #512]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a7f      	ldr	r2, [pc, #508]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x5de>
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a79      	ldr	r2, [pc, #484]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	4b77      	ldr	r3, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a76      	ldr	r2, [pc, #472]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d015      	beq.n	8003e0e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fc fe37 	bl	8000a54 <HAL_GetTick>
 8003de6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fc fe33 	bl	8000a54 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e123      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RCC_OscConfig+0x5ee>
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fc fe21 	bl	8000a54 <HAL_GetTick>
 8003e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fc fe1d 	bl	8000a54 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e10d      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e2c:	4b5f      	ldr	r3, [pc, #380]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ee      	bne.n	8003e16 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8102 	beq.w	8004046 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e42:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e4a:	2b18      	cmp	r3, #24
 8003e4c:	f000 80bd 	beq.w	8003fca <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f040 8095 	bne.w	8003f84 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b54      	ldr	r3, [pc, #336]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a53      	ldr	r2, [pc, #332]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fc fdf5 	bl	8000a54 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fc fdf1 	bl	8000a54 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0e3      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e80:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8c:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_RCC_OscConfig+0x7b8>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e9c:	0112      	lsls	r2, r2, #4
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	4942      	ldr	r1, [pc, #264]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	025b      	lsls	r3, r3, #9
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed6:	4935      	ldr	r1, [pc, #212]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a32      	ldr	r2, [pc, #200]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_RCC_OscConfig+0x7bc>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ef4:	00d2      	lsls	r2, r2, #3
 8003ef6:	492d      	ldr	r1, [pc, #180]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f023 020c 	bic.w	r2, r3, #12
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	4928      	ldr	r1, [pc, #160]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f023 0202 	bic.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	4924      	ldr	r1, [pc, #144]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f20:	4b22      	ldr	r3, [pc, #136]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a21      	ldr	r2, [pc, #132]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fc fd7a 	bl	8000a54 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fc fd76 	bl	8000a54 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e068      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x768>
 8003f82:	e060      	b.n	8004046 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <HAL_RCC_OscConfig+0x7b0>)
 8003f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fc fd60 	bl	8000a54 <HAL_GetTick>
 8003f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f96:	e011      	b.n	8003fbc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fc fd5c 	bl	8000a54 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d90a      	bls.n	8003fbc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e04e      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
 8003faa:	bf00      	nop
 8003fac:	58024400 	.word	0x58024400
 8003fb0:	58024800 	.word	0x58024800
 8003fb4:	fffffc0c 	.word	0xfffffc0c
 8003fb8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x854>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e7      	bne.n	8003f98 <HAL_RCC_OscConfig+0x79c>
 8003fc8:	e03d      	b.n	8004046 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fca:	4b21      	ldr	r3, [pc, #132]	; (8004050 <HAL_RCC_OscConfig+0x854>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <HAL_RCC_OscConfig+0x854>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d031      	beq.n	8004042 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d12a      	bne.n	8004042 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d122      	bne.n	8004042 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d11a      	bne.n	8004042 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	0a5b      	lsrs	r3, r3, #9
 8004010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004018:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d111      	bne.n	8004042 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d108      	bne.n	8004042 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	0e1b      	lsrs	r3, r3, #24
 8004034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3730      	adds	r7, #48	; 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	58024400 	.word	0x58024400

08004054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e19c      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b8a      	ldr	r3, [pc, #552]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b87      	ldr	r3, [pc, #540]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	4985      	ldr	r1, [pc, #532]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b83      	ldr	r3, [pc, #524]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e184      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d010      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d908      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b4:	4b78      	ldr	r3, [pc, #480]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4975      	ldr	r1, [pc, #468]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d010      	beq.n	80040f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	4b70      	ldr	r3, [pc, #448]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040de:	429a      	cmp	r2, r3
 80040e0:	d908      	bls.n	80040f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040e2:	4b6d      	ldr	r3, [pc, #436]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	496a      	ldr	r1, [pc, #424]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	4b64      	ldr	r3, [pc, #400]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800410c:	429a      	cmp	r2, r3
 800410e:	d908      	bls.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004110:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	495e      	ldr	r1, [pc, #376]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 800411e:	4313      	orrs	r3, r2
 8004120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	4b59      	ldr	r3, [pc, #356]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800413a:	429a      	cmp	r2, r3
 800413c:	d908      	bls.n	8004150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800413e:	4b56      	ldr	r3, [pc, #344]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4953      	ldr	r1, [pc, #332]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 800414c:	4313      	orrs	r3, r2
 800414e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	429a      	cmp	r2, r3
 800416a:	d908      	bls.n	800417e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f023 020f 	bic.w	r2, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4947      	ldr	r1, [pc, #284]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 800417a:	4313      	orrs	r3, r2
 800417c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d055      	beq.n	8004236 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800418a:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4940      	ldr	r1, [pc, #256]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004198:	4313      	orrs	r3, r2
 800419a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a4:	4b3c      	ldr	r3, [pc, #240]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0f6      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d115      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0ea      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0de      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e4:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0d6      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f4:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f023 0207 	bic.w	r2, r3, #7
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4925      	ldr	r1, [pc, #148]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004202:	4313      	orrs	r3, r2
 8004204:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004206:	f7fc fc25 	bl	8000a54 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420c:	e00a      	b.n	8004224 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420e:	f7fc fc21 	bl	8000a54 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f241 3288 	movw	r2, #5000	; 0x1388
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e0be      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	429a      	cmp	r2, r3
 8004234:	d1eb      	bne.n	800420e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	429a      	cmp	r2, r3
 8004250:	d208      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f023 020f 	bic.w	r2, r3, #15
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	490e      	ldr	r1, [pc, #56]	; (8004298 <HAL_RCC_ClockConfig+0x244>)
 8004260:	4313      	orrs	r3, r2
 8004262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d214      	bcs.n	800429c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 020f 	bic.w	r2, r3, #15
 800427a:	4906      	ldr	r1, [pc, #24]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <HAL_RCC_ClockConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e086      	b.n	80043a2 <HAL_RCC_ClockConfig+0x34e>
 8004294:	52002000 	.word	0x52002000
 8004298:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d208      	bcs.n	80042ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042b8:	4b3c      	ldr	r3, [pc, #240]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	4939      	ldr	r1, [pc, #228]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	4b34      	ldr	r3, [pc, #208]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d208      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042e6:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	492e      	ldr	r1, [pc, #184]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004310:	429a      	cmp	r2, r3
 8004312:	d208      	bcs.n	8004326 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	4922      	ldr	r1, [pc, #136]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004322:	4313      	orrs	r3, r2
 8004324:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d010      	beq.n	8004354 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433e:	429a      	cmp	r2, r3
 8004340:	d208      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	4917      	ldr	r1, [pc, #92]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004350:	4313      	orrs	r3, r2
 8004352:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004354:	f000 f834 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	4912      	ldr	r1, [pc, #72]	; (80043b0 <HAL_RCC_ClockConfig+0x35c>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCC_ClockConfig+0x358>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_RCC_ClockConfig+0x35c>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x360>)
 800438a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x364>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x368>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc fb12 	bl	80009c0 <HAL_InitTick>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	080056c8 	.word	0x080056c8
 80043b4:	24000004 	.word	0x24000004
 80043b8:	24000000 	.word	0x24000000
 80043bc:	24000008 	.word	0x24000008

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c6:	4bb3      	ldr	r3, [pc, #716]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	f200 8155 	bhi.w	800467e <HAL_RCC_GetSysClockFreq+0x2be>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004441 	.word	0x08004441
 80043e0:	0800467f 	.word	0x0800467f
 80043e4:	0800467f 	.word	0x0800467f
 80043e8:	0800467f 	.word	0x0800467f
 80043ec:	0800467f 	.word	0x0800467f
 80043f0:	0800467f 	.word	0x0800467f
 80043f4:	0800467f 	.word	0x0800467f
 80043f8:	0800467f 	.word	0x0800467f
 80043fc:	08004467 	.word	0x08004467
 8004400:	0800467f 	.word	0x0800467f
 8004404:	0800467f 	.word	0x0800467f
 8004408:	0800467f 	.word	0x0800467f
 800440c:	0800467f 	.word	0x0800467f
 8004410:	0800467f 	.word	0x0800467f
 8004414:	0800467f 	.word	0x0800467f
 8004418:	0800467f 	.word	0x0800467f
 800441c:	0800446d 	.word	0x0800446d
 8004420:	0800467f 	.word	0x0800467f
 8004424:	0800467f 	.word	0x0800467f
 8004428:	0800467f 	.word	0x0800467f
 800442c:	0800467f 	.word	0x0800467f
 8004430:	0800467f 	.word	0x0800467f
 8004434:	0800467f 	.word	0x0800467f
 8004438:	0800467f 	.word	0x0800467f
 800443c:	08004473 	.word	0x08004473
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004440:	4b94      	ldr	r3, [pc, #592]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800444c:	4b91      	ldr	r3, [pc, #580]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	08db      	lsrs	r3, r3, #3
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	4a90      	ldr	r2, [pc, #576]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800445e:	e111      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004460:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004462:	61bb      	str	r3, [r7, #24]
    break;
 8004464:	e10e      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004466:	4b8d      	ldr	r3, [pc, #564]	; (800469c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004468:	61bb      	str	r3, [r7, #24]
    break;
 800446a:	e10b      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800446c:	4b8c      	ldr	r3, [pc, #560]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800446e:	61bb      	str	r3, [r7, #24]
    break;
 8004470:	e108      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004472:	4b88      	ldr	r3, [pc, #544]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800447c:	4b85      	ldr	r3, [pc, #532]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004486:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004488:	4b82      	ldr	r3, [pc, #520]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004492:	4b80      	ldr	r3, [pc, #512]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	08db      	lsrs	r3, r3, #3
 8004498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80e1 	beq.w	8004678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	f000 8083 	beq.w	80045c4 <HAL_RCC_GetSysClockFreq+0x204>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	f200 80a1 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x248>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x114>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d056      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044d2:	e099      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d4:	4b6f      	ldr	r3, [pc, #444]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02d      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044e0:	4b6c      	ldr	r3, [pc, #432]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	4a6b      	ldr	r2, [pc, #428]	; (8004698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b62      	ldr	r3, [pc, #392]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a02 	vldr	s12, [r7, #8]
 800451e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800453a:	e087      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800454a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454e:	4b51      	ldr	r3, [pc, #324]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004562:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800457e:	e065      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c2:	e043      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004606:	e021      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a02 	vldr	s12, [r7, #8]
 800462e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	0a5b      	lsrs	r3, r3, #9
 8004652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004656:	3301      	adds	r3, #1
 8004658:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004664:	edd7 6a07 	vldr	s13, [r7, #28]
 8004668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004670:	ee17 3a90 	vmov	r3, s15
 8004674:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004676:	e005      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
    break;
 800467c:	e002      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004680:	61bb      	str	r3, [r7, #24]
    break;
 8004682:	bf00      	nop
  }

  return sysclockfreq;
 8004684:	69bb      	ldr	r3, [r7, #24]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
 8004698:	03d09000 	.word	0x03d09000
 800469c:	003d0900 	.word	0x003d0900
 80046a0:	017d7840 	.word	0x017d7840
 80046a4:	46000000 	.word	0x46000000
 80046a8:	4c742400 	.word	0x4c742400
 80046ac:	4a742400 	.word	0x4a742400
 80046b0:	4bbebc20 	.word	0x4bbebc20

080046b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e049      	b.n	800475a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc f82c 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 f8a6 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04c      	b.n	8004816 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a26      	ldr	r2, [pc, #152]	; (8004824 <HAL_TIM_Base_Start+0xc0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d01d      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_TIM_Base_Start+0xc4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	; (800482c <HAL_TIM_Base_Start+0xc8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_TIM_Base_Start+0xcc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_TIM_Base_Start+0xd0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_TIM_Base_Start+0xd4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_TIM_Base_Start+0xd8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d115      	bne.n	8004800 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_TIM_Base_Start+0xdc>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b06      	cmp	r3, #6
 80047e4:	d015      	beq.n	8004812 <HAL_TIM_Base_Start+0xae>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d011      	beq.n	8004812 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	e008      	b.n	8004812 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e000      	b.n	8004814 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40001800 	.word	0x40001800
 800483c:	40014000 	.word	0x40014000
 8004840:	00010007 	.word	0x00010007

08004844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <TIM_Base_SetConfig+0x114>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d00f      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3d      	ldr	r2, [pc, #244]	; (800495c <TIM_Base_SetConfig+0x118>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00b      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <TIM_Base_SetConfig+0x11c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <TIM_Base_SetConfig+0x120>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3a      	ldr	r2, [pc, #232]	; (8004968 <TIM_Base_SetConfig+0x124>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <TIM_Base_SetConfig+0x114>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2c      	ldr	r2, [pc, #176]	; (800495c <TIM_Base_SetConfig+0x118>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2b      	ldr	r2, [pc, #172]	; (8004960 <TIM_Base_SetConfig+0x11c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2a      	ldr	r2, [pc, #168]	; (8004964 <TIM_Base_SetConfig+0x120>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a29      	ldr	r2, [pc, #164]	; (8004968 <TIM_Base_SetConfig+0x124>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a28      	ldr	r2, [pc, #160]	; (800496c <TIM_Base_SetConfig+0x128>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a27      	ldr	r2, [pc, #156]	; (8004970 <TIM_Base_SetConfig+0x12c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0x9a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a26      	ldr	r2, [pc, #152]	; (8004974 <TIM_Base_SetConfig+0x130>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <TIM_Base_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <TIM_Base_SetConfig+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a11      	ldr	r2, [pc, #68]	; (800496c <TIM_Base_SetConfig+0x128>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a10      	ldr	r2, [pc, #64]	; (8004970 <TIM_Base_SetConfig+0x12c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0xf8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <TIM_Base_SetConfig+0x130>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40010400 	.word	0x40010400
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e06d      	b.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d01d      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40001800 	.word	0x40001800
 8004a90:	40014000 	.word	0x40014000

08004a94 <__libc_init_array>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4d0d      	ldr	r5, [pc, #52]	; (8004acc <__libc_init_array+0x38>)
 8004a98:	4c0d      	ldr	r4, [pc, #52]	; (8004ad0 <__libc_init_array+0x3c>)
 8004a9a:	1b64      	subs	r4, r4, r5
 8004a9c:	10a4      	asrs	r4, r4, #2
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	42a6      	cmp	r6, r4
 8004aa2:	d109      	bne.n	8004ab8 <__libc_init_array+0x24>
 8004aa4:	4d0b      	ldr	r5, [pc, #44]	; (8004ad4 <__libc_init_array+0x40>)
 8004aa6:	4c0c      	ldr	r4, [pc, #48]	; (8004ad8 <__libc_init_array+0x44>)
 8004aa8:	f000 fe00 	bl	80056ac <_init>
 8004aac:	1b64      	subs	r4, r4, r5
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	2600      	movs	r6, #0
 8004ab2:	42a6      	cmp	r6, r4
 8004ab4:	d105      	bne.n	8004ac2 <__libc_init_array+0x2e>
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abc:	4798      	blx	r3
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7ee      	b.n	8004aa0 <__libc_init_array+0xc>
 8004ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac6:	4798      	blx	r3
 8004ac8:	3601      	adds	r6, #1
 8004aca:	e7f2      	b.n	8004ab2 <__libc_init_array+0x1e>
 8004acc:	080058b8 	.word	0x080058b8
 8004ad0:	080058b8 	.word	0x080058b8
 8004ad4:	080058b8 	.word	0x080058b8
 8004ad8:	080058bc 	.word	0x080058bc

08004adc <memset>:
 8004adc:	4402      	add	r2, r0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>
 8004aec:	0000      	movs	r0, r0
	...

08004af0 <sin>:
 8004af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004af2:	eeb0 7b40 	vmov.f64	d7, d0
 8004af6:	ee17 3a90 	vmov	r3, s15
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <sin+0x88>)
 8004afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b00:	4293      	cmp	r3, r2
 8004b02:	dc05      	bgt.n	8004b10 <sin+0x20>
 8004b04:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8004b70 <sin+0x80>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f000 fc65 	bl	80053d8 <__kernel_sin>
 8004b0e:	e004      	b.n	8004b1a <sin+0x2a>
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <sin+0x8c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	dd04      	ble.n	8004b20 <sin+0x30>
 8004b16:	ee30 0b40 	vsub.f64	d0, d0, d0
 8004b1a:	b005      	add	sp, #20
 8004b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b20:	4668      	mov	r0, sp
 8004b22:	f000 f82d 	bl	8004b80 <__ieee754_rem_pio2>
 8004b26:	f000 0003 	and.w	r0, r0, #3
 8004b2a:	2801      	cmp	r0, #1
 8004b2c:	d008      	beq.n	8004b40 <sin+0x50>
 8004b2e:	2802      	cmp	r0, #2
 8004b30:	d00d      	beq.n	8004b4e <sin+0x5e>
 8004b32:	b9b0      	cbnz	r0, 8004b62 <sin+0x72>
 8004b34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b38:	ed9d 0b00 	vldr	d0, [sp]
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	e7e4      	b.n	8004b0a <sin+0x1a>
 8004b40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b44:	ed9d 0b00 	vldr	d0, [sp]
 8004b48:	f000 f95a 	bl	8004e00 <__kernel_cos>
 8004b4c:	e7e5      	b.n	8004b1a <sin+0x2a>
 8004b4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b52:	ed9d 0b00 	vldr	d0, [sp]
 8004b56:	2001      	movs	r0, #1
 8004b58:	f000 fc3e 	bl	80053d8 <__kernel_sin>
 8004b5c:	eeb1 0b40 	vneg.f64	d0, d0
 8004b60:	e7db      	b.n	8004b1a <sin+0x2a>
 8004b62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b66:	ed9d 0b00 	vldr	d0, [sp]
 8004b6a:	f000 f949 	bl	8004e00 <__kernel_cos>
 8004b6e:	e7f5      	b.n	8004b5c <sin+0x6c>
	...
 8004b78:	3fe921fb 	.word	0x3fe921fb
 8004b7c:	7fefffff 	.word	0x7fefffff

08004b80 <__ieee754_rem_pio2>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	eeb0 7b40 	vmov.f64	d7, d0
 8004b86:	ee17 5a90 	vmov	r5, s15
 8004b8a:	4b97      	ldr	r3, [pc, #604]	; (8004de8 <__ieee754_rem_pio2+0x268>)
 8004b8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004b90:	429e      	cmp	r6, r3
 8004b92:	b088      	sub	sp, #32
 8004b94:	4604      	mov	r4, r0
 8004b96:	dc07      	bgt.n	8004ba8 <__ieee754_rem_pio2+0x28>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	ed84 0b00 	vstr	d0, [r4]
 8004ba0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e01b      	b.n	8004be0 <__ieee754_rem_pio2+0x60>
 8004ba8:	4b90      	ldr	r3, [pc, #576]	; (8004dec <__ieee754_rem_pio2+0x26c>)
 8004baa:	429e      	cmp	r6, r3
 8004bac:	dc3b      	bgt.n	8004c26 <__ieee754_rem_pio2+0xa6>
 8004bae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004da8 <__ieee754_rem_pio2+0x228>
 8004bb8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8004bbc:	dd19      	ble.n	8004bf2 <__ieee754_rem_pio2+0x72>
 8004bbe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8004bc2:	429e      	cmp	r6, r3
 8004bc4:	d00e      	beq.n	8004be4 <__ieee754_rem_pio2+0x64>
 8004bc6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8004db0 <__ieee754_rem_pio2+0x230>
 8004bca:	ee37 5b46 	vsub.f64	d5, d7, d6
 8004bce:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004bd2:	ed84 5b00 	vstr	d5, [r4]
 8004bd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bda:	ed84 7b02 	vstr	d7, [r4, #8]
 8004bde:	2001      	movs	r0, #1
 8004be0:	b008      	add	sp, #32
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8004db8 <__ieee754_rem_pio2+0x238>
 8004be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bec:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8004dc0 <__ieee754_rem_pio2+0x240>
 8004bf0:	e7eb      	b.n	8004bca <__ieee754_rem_pio2+0x4a>
 8004bf2:	429e      	cmp	r6, r3
 8004bf4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8004bf8:	d00e      	beq.n	8004c18 <__ieee754_rem_pio2+0x98>
 8004bfa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8004db0 <__ieee754_rem_pio2+0x230>
 8004bfe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8004c02:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004c06:	ed84 5b00 	vstr	d5, [r4]
 8004c0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	ed84 7b02 	vstr	d7, [r4, #8]
 8004c16:	e7e3      	b.n	8004be0 <__ieee754_rem_pio2+0x60>
 8004c18:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8004db8 <__ieee754_rem_pio2+0x238>
 8004c1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c20:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8004dc0 <__ieee754_rem_pio2+0x240>
 8004c24:	e7eb      	b.n	8004bfe <__ieee754_rem_pio2+0x7e>
 8004c26:	4b72      	ldr	r3, [pc, #456]	; (8004df0 <__ieee754_rem_pio2+0x270>)
 8004c28:	429e      	cmp	r6, r3
 8004c2a:	dc6e      	bgt.n	8004d0a <__ieee754_rem_pio2+0x18a>
 8004c2c:	f000 fc2c 	bl	8005488 <fabs>
 8004c30:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8004c34:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8004dc8 <__ieee754_rem_pio2+0x248>
 8004c38:	eea0 7b06 	vfma.f64	d7, d0, d6
 8004c3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004c40:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004c44:	ee17 0a90 	vmov	r0, s15
 8004c48:	eeb1 4b45 	vneg.f64	d4, d5
 8004c4c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8004da8 <__ieee754_rem_pio2+0x228>
 8004c50:	eea5 0b47 	vfms.f64	d0, d5, d7
 8004c54:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8004db0 <__ieee754_rem_pio2+0x230>
 8004c58:	281f      	cmp	r0, #31
 8004c5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c5e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8004c62:	dc08      	bgt.n	8004c76 <__ieee754_rem_pio2+0xf6>
 8004c64:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <__ieee754_rem_pio2+0x274>)
 8004c66:	1e42      	subs	r2, r0, #1
 8004c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6c:	42b3      	cmp	r3, r6
 8004c6e:	d002      	beq.n	8004c76 <__ieee754_rem_pio2+0xf6>
 8004c70:	ed84 6b00 	vstr	d6, [r4]
 8004c74:	e024      	b.n	8004cc0 <__ieee754_rem_pio2+0x140>
 8004c76:	ee16 3a90 	vmov	r3, s13
 8004c7a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8004c7e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	ea4f 5226 	mov.w	r2, r6, asr #20
 8004c88:	ddf2      	ble.n	8004c70 <__ieee754_rem_pio2+0xf0>
 8004c8a:	eeb0 6b40 	vmov.f64	d6, d0
 8004c8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8004db8 <__ieee754_rem_pio2+0x238>
 8004c92:	eea4 6b03 	vfma.f64	d6, d4, d3
 8004c96:	ee30 7b46 	vsub.f64	d7, d0, d6
 8004c9a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8004c9e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8004dc0 <__ieee754_rem_pio2+0x240>
 8004ca2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8004ca6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8004caa:	ee13 3a90 	vmov	r3, s7
 8004cae:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b31      	cmp	r3, #49	; 0x31
 8004cb6:	dc17      	bgt.n	8004ce8 <__ieee754_rem_pio2+0x168>
 8004cb8:	eeb0 0b46 	vmov.f64	d0, d6
 8004cbc:	ed84 3b00 	vstr	d3, [r4]
 8004cc0:	ed94 6b00 	vldr	d6, [r4]
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8004cca:	ee30 7b47 	vsub.f64	d7, d0, d7
 8004cce:	ed84 7b02 	vstr	d7, [r4, #8]
 8004cd2:	da85      	bge.n	8004be0 <__ieee754_rem_pio2+0x60>
 8004cd4:	eeb1 6b46 	vneg.f64	d6, d6
 8004cd8:	ed84 6b00 	vstr	d6, [r4]
 8004cdc:	eeb1 7b47 	vneg.f64	d7, d7
 8004ce0:	4240      	negs	r0, r0
 8004ce2:	ed84 7b02 	vstr	d7, [r4, #8]
 8004ce6:	e77b      	b.n	8004be0 <__ieee754_rem_pio2+0x60>
 8004ce8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8004dd0 <__ieee754_rem_pio2+0x250>
 8004cec:	eeb0 0b46 	vmov.f64	d0, d6
 8004cf0:	eea4 0b03 	vfma.f64	d0, d4, d3
 8004cf4:	ee36 7b40 	vsub.f64	d7, d6, d0
 8004cf8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8004dd8 <__ieee754_rem_pio2+0x258>
 8004cfc:	eea4 7b03 	vfma.f64	d7, d4, d3
 8004d00:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8004d04:	ee30 6b47 	vsub.f64	d6, d0, d7
 8004d08:	e7b2      	b.n	8004c70 <__ieee754_rem_pio2+0xf0>
 8004d0a:	4b3b      	ldr	r3, [pc, #236]	; (8004df8 <__ieee754_rem_pio2+0x278>)
 8004d0c:	429e      	cmp	r6, r3
 8004d0e:	dd06      	ble.n	8004d1e <__ieee754_rem_pio2+0x19e>
 8004d10:	ee30 7b40 	vsub.f64	d7, d0, d0
 8004d14:	ed80 7b02 	vstr	d7, [r0, #8]
 8004d18:	ed80 7b00 	vstr	d7, [r0]
 8004d1c:	e742      	b.n	8004ba4 <__ieee754_rem_pio2+0x24>
 8004d1e:	1532      	asrs	r2, r6, #20
 8004d20:	ee10 0a10 	vmov	r0, s0
 8004d24:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8004d28:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8004d2c:	ec41 0b17 	vmov	d7, r0, r1
 8004d30:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8004d34:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004de0 <__ieee754_rem_pio2+0x260>
 8004d38:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8004d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004d44:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004d48:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8004d4c:	a902      	add	r1, sp, #8
 8004d4e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8004d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d56:	ed8d 6b04 	vstr	d6, [sp, #16]
 8004d5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004d5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d62:	2603      	movs	r6, #3
 8004d64:	4608      	mov	r0, r1
 8004d66:	ed91 7b04 	vldr	d7, [r1, #16]
 8004d6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	4633      	mov	r3, r6
 8004d74:	f1a1 0108 	sub.w	r1, r1, #8
 8004d78:	f106 36ff 	add.w	r6, r6, #4294967295
 8004d7c:	d0f3      	beq.n	8004d66 <__ieee754_rem_pio2+0x1e6>
 8004d7e:	491f      	ldr	r1, [pc, #124]	; (8004dfc <__ieee754_rem_pio2+0x27c>)
 8004d80:	9101      	str	r1, [sp, #4]
 8004d82:	2102      	movs	r1, #2
 8004d84:	9100      	str	r1, [sp, #0]
 8004d86:	4621      	mov	r1, r4
 8004d88:	f000 f8a6 	bl	8004ed8 <__kernel_rem_pio2>
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	f6bf af27 	bge.w	8004be0 <__ieee754_rem_pio2+0x60>
 8004d92:	ed94 7b00 	vldr	d7, [r4]
 8004d96:	eeb1 7b47 	vneg.f64	d7, d7
 8004d9a:	ed84 7b00 	vstr	d7, [r4]
 8004d9e:	ed94 7b02 	vldr	d7, [r4, #8]
 8004da2:	e79b      	b.n	8004cdc <__ieee754_rem_pio2+0x15c>
 8004da4:	f3af 8000 	nop.w
 8004da8:	54400000 	.word	0x54400000
 8004dac:	3ff921fb 	.word	0x3ff921fb
 8004db0:	1a626331 	.word	0x1a626331
 8004db4:	3dd0b461 	.word	0x3dd0b461
 8004db8:	1a600000 	.word	0x1a600000
 8004dbc:	3dd0b461 	.word	0x3dd0b461
 8004dc0:	2e037073 	.word	0x2e037073
 8004dc4:	3ba3198a 	.word	0x3ba3198a
 8004dc8:	6dc9c883 	.word	0x6dc9c883
 8004dcc:	3fe45f30 	.word	0x3fe45f30
 8004dd0:	2e000000 	.word	0x2e000000
 8004dd4:	3ba3198a 	.word	0x3ba3198a
 8004dd8:	252049c1 	.word	0x252049c1
 8004ddc:	397b839a 	.word	0x397b839a
 8004de0:	00000000 	.word	0x00000000
 8004de4:	41700000 	.word	0x41700000
 8004de8:	3fe921fb 	.word	0x3fe921fb
 8004dec:	4002d97b 	.word	0x4002d97b
 8004df0:	413921fb 	.word	0x413921fb
 8004df4:	080056e0 	.word	0x080056e0
 8004df8:	7fefffff 	.word	0x7fefffff
 8004dfc:	08005760 	.word	0x08005760

08004e00 <__kernel_cos>:
 8004e00:	ee10 1a90 	vmov	r1, s1
 8004e04:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8004e08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004e0c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8004e10:	da05      	bge.n	8004e1e <__kernel_cos+0x1e>
 8004e12:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8004e16:	ee17 3a90 	vmov	r3, s15
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d03d      	beq.n	8004e9a <__kernel_cos+0x9a>
 8004e1e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8004e22:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8004ea0 <__kernel_cos+0xa0>
 8004e26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8004ea8 <__kernel_cos+0xa8>
 8004e2a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8004e2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8004eb0 <__kernel_cos+0xb0>
 8004e32:	eea6 7b03 	vfma.f64	d7, d6, d3
 8004e36:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8004eb8 <__kernel_cos+0xb8>
 8004e3a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8004e3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8004ec0 <__kernel_cos+0xc0>
 8004e42:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <__kernel_cos+0xd0>)
 8004e44:	eea6 7b03 	vfma.f64	d7, d6, d3
 8004e48:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004ec8 <__kernel_cos+0xc8>
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8004e52:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8004e56:	ee26 5b03 	vmul.f64	d5, d6, d3
 8004e5a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8004e5e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8004e62:	eea3 6b05 	vfma.f64	d6, d3, d5
 8004e66:	dc04      	bgt.n	8004e72 <__kernel_cos+0x72>
 8004e68:	ee37 6b46 	vsub.f64	d6, d7, d6
 8004e6c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8004e70:	4770      	bx	lr
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <__kernel_cos+0xd4>)
 8004e74:	4299      	cmp	r1, r3
 8004e76:	dc0d      	bgt.n	8004e94 <__kernel_cos+0x94>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8004e7e:	ec43 2b15 	vmov	d5, r2, r3
 8004e82:	ee34 0b45 	vsub.f64	d0, d4, d5
 8004e86:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e8e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8004e92:	4770      	bx	lr
 8004e94:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8004e98:	e7f3      	b.n	8004e82 <__kernel_cos+0x82>
 8004e9a:	eeb0 0b44 	vmov.f64	d0, d4
 8004e9e:	4770      	bx	lr
 8004ea0:	be8838d4 	.word	0xbe8838d4
 8004ea4:	bda8fae9 	.word	0xbda8fae9
 8004ea8:	bdb4b1c4 	.word	0xbdb4b1c4
 8004eac:	3e21ee9e 	.word	0x3e21ee9e
 8004eb0:	809c52ad 	.word	0x809c52ad
 8004eb4:	be927e4f 	.word	0xbe927e4f
 8004eb8:	19cb1590 	.word	0x19cb1590
 8004ebc:	3efa01a0 	.word	0x3efa01a0
 8004ec0:	16c15177 	.word	0x16c15177
 8004ec4:	bf56c16c 	.word	0xbf56c16c
 8004ec8:	5555554c 	.word	0x5555554c
 8004ecc:	3fa55555 	.word	0x3fa55555
 8004ed0:	3fd33332 	.word	0x3fd33332
 8004ed4:	3fe90000 	.word	0x3fe90000

08004ed8 <__kernel_rem_pio2>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	ed2d 8b06 	vpush	{d8-d10}
 8004ee0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8004ee4:	469b      	mov	fp, r3
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	4bcf      	ldr	r3, [pc, #828]	; (8005228 <__kernel_rem_pio2+0x350>)
 8004eea:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8004eec:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8004ef0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8004ef4:	9000      	str	r0, [sp, #0]
 8004ef6:	f112 0f14 	cmn.w	r2, #20
 8004efa:	bfa8      	it	ge
 8004efc:	2318      	movge	r3, #24
 8004efe:	f10b 31ff 	add.w	r1, fp, #4294967295
 8004f02:	bfb8      	it	lt
 8004f04:	2300      	movlt	r3, #0
 8004f06:	f06f 0417 	mvn.w	r4, #23
 8004f0a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8005210 <__kernel_rem_pio2+0x338>
 8004f0e:	bfa4      	itt	ge
 8004f10:	f1a2 0a03 	subge.w	sl, r2, #3
 8004f14:	fb9a f3f3 	sdivge	r3, sl, r3
 8004f18:	fb03 4404 	mla	r4, r3, r4, r4
 8004f1c:	1a5d      	subs	r5, r3, r1
 8004f1e:	4414      	add	r4, r2
 8004f20:	eb09 0601 	add.w	r6, r9, r1
 8004f24:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8004f28:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	42b2      	cmp	r2, r6
 8004f30:	dd12      	ble.n	8004f58 <__kernel_rem_pio2+0x80>
 8004f32:	aa18      	add	r2, sp, #96	; 0x60
 8004f34:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8004f38:	460e      	mov	r6, r1
 8004f3a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8004f3e:	f1cb 0a01 	rsb	sl, fp, #1
 8004f42:	eb0a 0006 	add.w	r0, sl, r6
 8004f46:	4581      	cmp	r9, r0
 8004f48:	db25      	blt.n	8004f96 <__kernel_rem_pio2+0xbe>
 8004f4a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8005210 <__kernel_rem_pio2+0x338>
 8004f4e:	f8dd e000 	ldr.w	lr, [sp]
 8004f52:	4615      	mov	r5, r2
 8004f54:	2000      	movs	r0, #0
 8004f56:	e015      	b.n	8004f84 <__kernel_rem_pio2+0xac>
 8004f58:	42d5      	cmn	r5, r2
 8004f5a:	d409      	bmi.n	8004f70 <__kernel_rem_pio2+0x98>
 8004f5c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8004f60:	ee07 0a90 	vmov	s15, r0
 8004f64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f68:	eca8 7b02 	vstmia	r8!, {d7}
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	e7de      	b.n	8004f2e <__kernel_rem_pio2+0x56>
 8004f70:	eeb0 7b46 	vmov.f64	d7, d6
 8004f74:	e7f8      	b.n	8004f68 <__kernel_rem_pio2+0x90>
 8004f76:	ecbe 5b02 	vldmia	lr!, {d5}
 8004f7a:	ed95 6b00 	vldr	d6, [r5]
 8004f7e:	3001      	adds	r0, #1
 8004f80:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004f84:	4288      	cmp	r0, r1
 8004f86:	f1a5 0508 	sub.w	r5, r5, #8
 8004f8a:	ddf4      	ble.n	8004f76 <__kernel_rem_pio2+0x9e>
 8004f8c:	eca8 7b02 	vstmia	r8!, {d7}
 8004f90:	3208      	adds	r2, #8
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7d5      	b.n	8004f42 <__kernel_rem_pio2+0x6a>
 8004f96:	aa04      	add	r2, sp, #16
 8004f98:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8005218 <__kernel_rem_pio2+0x340>
 8004f9c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8005220 <__kernel_rem_pio2+0x348>
 8004fa0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8004fa4:	9201      	str	r2, [sp, #4]
 8004fa6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8004faa:	464e      	mov	r6, r9
 8004fac:	ab90      	add	r3, sp, #576	; 0x240
 8004fae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fb2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8004fb6:	ab04      	add	r3, sp, #16
 8004fb8:	4618      	mov	r0, r3
 8004fba:	4632      	mov	r2, r6
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	dc4e      	bgt.n	800505e <__kernel_rem_pio2+0x186>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8004fc6:	f000 fadf 	bl	8005588 <scalbn>
 8004fca:	eeb0 8b40 	vmov.f64	d8, d0
 8004fce:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8004fd2:	ee28 0b00 	vmul.f64	d0, d8, d0
 8004fd6:	f000 fa63 	bl	80054a0 <floor>
 8004fda:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8004fde:	eea0 8b47 	vfms.f64	d8, d0, d7
 8004fe2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8004fe6:	2c00      	cmp	r4, #0
 8004fe8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8004fec:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8004ff0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8004ff4:	ee17 8a90 	vmov	r8, s15
 8004ff8:	dd46      	ble.n	8005088 <__kernel_rem_pio2+0x1b0>
 8004ffa:	1e70      	subs	r0, r6, #1
 8004ffc:	aa04      	add	r2, sp, #16
 8004ffe:	f1c4 0c18 	rsb	ip, r4, #24
 8005002:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8005006:	fa45 f20c 	asr.w	r2, r5, ip
 800500a:	4490      	add	r8, r2
 800500c:	fa02 f20c 	lsl.w	r2, r2, ip
 8005010:	1aad      	subs	r5, r5, r2
 8005012:	aa04      	add	r2, sp, #16
 8005014:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8005018:	f1c4 0217 	rsb	r2, r4, #23
 800501c:	4115      	asrs	r5, r2
 800501e:	2d00      	cmp	r5, #0
 8005020:	dd41      	ble.n	80050a6 <__kernel_rem_pio2+0x1ce>
 8005022:	f04f 0c00 	mov.w	ip, #0
 8005026:	f108 0801 	add.w	r8, r8, #1
 800502a:	4660      	mov	r0, ip
 800502c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8005030:	4566      	cmp	r6, ip
 8005032:	dc69      	bgt.n	8005108 <__kernel_rem_pio2+0x230>
 8005034:	2c00      	cmp	r4, #0
 8005036:	dd03      	ble.n	8005040 <__kernel_rem_pio2+0x168>
 8005038:	2c01      	cmp	r4, #1
 800503a:	d076      	beq.n	800512a <__kernel_rem_pio2+0x252>
 800503c:	2c02      	cmp	r4, #2
 800503e:	d07f      	beq.n	8005140 <__kernel_rem_pio2+0x268>
 8005040:	2d02      	cmp	r5, #2
 8005042:	d130      	bne.n	80050a6 <__kernel_rem_pio2+0x1ce>
 8005044:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005048:	ee30 8b48 	vsub.f64	d8, d0, d8
 800504c:	b358      	cbz	r0, 80050a6 <__kernel_rem_pio2+0x1ce>
 800504e:	4620      	mov	r0, r4
 8005050:	9102      	str	r1, [sp, #8]
 8005052:	f000 fa99 	bl	8005588 <scalbn>
 8005056:	9902      	ldr	r1, [sp, #8]
 8005058:	ee38 8b40 	vsub.f64	d8, d8, d0
 800505c:	e023      	b.n	80050a6 <__kernel_rem_pio2+0x1ce>
 800505e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8005062:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8005066:	3a01      	subs	r2, #1
 8005068:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800506c:	ad68      	add	r5, sp, #416	; 0x1a0
 800506e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8005072:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005076:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800507a:	eca0 0a01 	vstmia	r0!, {s0}
 800507e:	ed95 0b00 	vldr	d0, [r5]
 8005082:	ee37 0b00 	vadd.f64	d0, d7, d0
 8005086:	e799      	b.n	8004fbc <__kernel_rem_pio2+0xe4>
 8005088:	d105      	bne.n	8005096 <__kernel_rem_pio2+0x1be>
 800508a:	1e72      	subs	r2, r6, #1
 800508c:	a804      	add	r0, sp, #16
 800508e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8005092:	15ed      	asrs	r5, r5, #23
 8005094:	e7c3      	b.n	800501e <__kernel_rem_pio2+0x146>
 8005096:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800509a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	da2f      	bge.n	8005104 <__kernel_rem_pio2+0x22c>
 80050a4:	2500      	movs	r5, #0
 80050a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	f040 8087 	bne.w	80051c0 <__kernel_rem_pio2+0x2e8>
 80050b2:	1e73      	subs	r3, r6, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f04f 0c00 	mov.w	ip, #0
 80050ba:	4548      	cmp	r0, r9
 80050bc:	da47      	bge.n	800514e <__kernel_rem_pio2+0x276>
 80050be:	f1bc 0f00 	cmp.w	ip, #0
 80050c2:	d070      	beq.n	80051a6 <__kernel_rem_pio2+0x2ce>
 80050c4:	aa04      	add	r2, sp, #16
 80050c6:	3c18      	subs	r4, #24
 80050c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050cc:	2a00      	cmp	r2, #0
 80050ce:	d075      	beq.n	80051bc <__kernel_rem_pio2+0x2e4>
 80050d0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80050d4:	4620      	mov	r0, r4
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	f000 fa56 	bl	8005588 <scalbn>
 80050dc:	9b00      	ldr	r3, [sp, #0]
 80050de:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8005218 <__kernel_rem_pio2+0x340>
 80050e2:	461a      	mov	r2, r3
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	f280 80ac 	bge.w	8005242 <__kernel_rem_pio2+0x36a>
 80050ea:	4619      	mov	r1, r3
 80050ec:	2000      	movs	r0, #0
 80050ee:	2900      	cmp	r1, #0
 80050f0:	f2c0 80cd 	blt.w	800528e <__kernel_rem_pio2+0x3b6>
 80050f4:	aa68      	add	r2, sp, #416	; 0x1a0
 80050f6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80050fa:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8005210 <__kernel_rem_pio2+0x338>
 80050fe:	4e4b      	ldr	r6, [pc, #300]	; (800522c <__kernel_rem_pio2+0x354>)
 8005100:	2200      	movs	r2, #0
 8005102:	e0b8      	b.n	8005276 <__kernel_rem_pio2+0x39e>
 8005104:	2502      	movs	r5, #2
 8005106:	e78c      	b.n	8005022 <__kernel_rem_pio2+0x14a>
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	b948      	cbnz	r0, 8005120 <__kernel_rem_pio2+0x248>
 800510c:	b11a      	cbz	r2, 8005116 <__kernel_rem_pio2+0x23e>
 800510e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	f10c 0c01 	add.w	ip, ip, #1
 800511a:	3304      	adds	r3, #4
 800511c:	4610      	mov	r0, r2
 800511e:	e787      	b.n	8005030 <__kernel_rem_pio2+0x158>
 8005120:	ebae 0202 	sub.w	r2, lr, r2
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	4602      	mov	r2, r0
 8005128:	e7f5      	b.n	8005116 <__kernel_rem_pio2+0x23e>
 800512a:	1e72      	subs	r2, r6, #1
 800512c:	ab04      	add	r3, sp, #16
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005136:	f10d 0c10 	add.w	ip, sp, #16
 800513a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800513e:	e77f      	b.n	8005040 <__kernel_rem_pio2+0x168>
 8005140:	1e72      	subs	r2, r6, #1
 8005142:	ab04      	add	r3, sp, #16
 8005144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005148:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800514c:	e7f3      	b.n	8005136 <__kernel_rem_pio2+0x25e>
 800514e:	aa04      	add	r2, sp, #16
 8005150:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8005154:	3801      	subs	r0, #1
 8005156:	ea4c 0c02 	orr.w	ip, ip, r2
 800515a:	e7ae      	b.n	80050ba <__kernel_rem_pio2+0x1e2>
 800515c:	3001      	adds	r0, #1
 800515e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005162:	2a00      	cmp	r2, #0
 8005164:	d0fa      	beq.n	800515c <__kernel_rem_pio2+0x284>
 8005166:	eb06 020b 	add.w	r2, r6, fp
 800516a:	ad18      	add	r5, sp, #96	; 0x60
 800516c:	1c73      	adds	r3, r6, #1
 800516e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005172:	4406      	add	r6, r0
 8005174:	429e      	cmp	r6, r3
 8005176:	f6ff af19 	blt.w	8004fac <__kernel_rem_pio2+0xd4>
 800517a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800517e:	9d00      	ldr	r5, [sp, #0]
 8005180:	ee07 0a90 	vmov	s15, r0
 8005184:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005188:	2000      	movs	r0, #0
 800518a:	eca2 7b02 	vstmia	r2!, {d7}
 800518e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005210 <__kernel_rem_pio2+0x338>
 8005192:	4694      	mov	ip, r2
 8005194:	4288      	cmp	r0, r1
 8005196:	dd09      	ble.n	80051ac <__kernel_rem_pio2+0x2d4>
 8005198:	a868      	add	r0, sp, #416	; 0x1a0
 800519a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800519e:	ed80 7b00 	vstr	d7, [r0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	e7e6      	b.n	8005174 <__kernel_rem_pio2+0x29c>
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	2001      	movs	r0, #1
 80051aa:	e7d8      	b.n	800515e <__kernel_rem_pio2+0x286>
 80051ac:	ecb5 5b02 	vldmia	r5!, {d5}
 80051b0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80051b4:	3001      	adds	r0, #1
 80051b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80051ba:	e7eb      	b.n	8005194 <__kernel_rem_pio2+0x2bc>
 80051bc:	3b01      	subs	r3, #1
 80051be:	e781      	b.n	80050c4 <__kernel_rem_pio2+0x1ec>
 80051c0:	4260      	negs	r0, r4
 80051c2:	eeb0 0b48 	vmov.f64	d0, d8
 80051c6:	f000 f9df 	bl	8005588 <scalbn>
 80051ca:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8005220 <__kernel_rem_pio2+0x348>
 80051ce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	db2b      	blt.n	8005230 <__kernel_rem_pio2+0x358>
 80051d8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8005218 <__kernel_rem_pio2+0x340>
 80051dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80051e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80051e4:	aa04      	add	r2, sp, #16
 80051e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80051ea:	eea5 0b46 	vfms.f64	d0, d5, d6
 80051ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80051f2:	a904      	add	r1, sp, #16
 80051f4:	ee10 3a10 	vmov	r3, s0
 80051f8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80051fc:	ee17 2a10 	vmov	r2, s14
 8005200:	1c73      	adds	r3, r6, #1
 8005202:	3418      	adds	r4, #24
 8005204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005208:	e762      	b.n	80050d0 <__kernel_rem_pio2+0x1f8>
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w
	...
 800521c:	3e700000 	.word	0x3e700000
 8005220:	00000000 	.word	0x00000000
 8005224:	41700000 	.word	0x41700000
 8005228:	080058a8 	.word	0x080058a8
 800522c:	08005868 	.word	0x08005868
 8005230:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005234:	aa04      	add	r2, sp, #16
 8005236:	ee10 3a10 	vmov	r3, s0
 800523a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800523e:	4633      	mov	r3, r6
 8005240:	e746      	b.n	80050d0 <__kernel_rem_pio2+0x1f8>
 8005242:	a804      	add	r0, sp, #16
 8005244:	a968      	add	r1, sp, #416	; 0x1a0
 8005246:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800524a:	9000      	str	r0, [sp, #0]
 800524c:	ee07 0a90 	vmov	s15, r0
 8005250:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005254:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005258:	3a01      	subs	r2, #1
 800525a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800525e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8005262:	ed81 7b00 	vstr	d7, [r1]
 8005266:	e73d      	b.n	80050e4 <__kernel_rem_pio2+0x20c>
 8005268:	ecb6 5b02 	vldmia	r6!, {d5}
 800526c:	ecb4 6b02 	vldmia	r4!, {d6}
 8005270:	3201      	adds	r2, #1
 8005272:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005276:	454a      	cmp	r2, r9
 8005278:	dc01      	bgt.n	800527e <__kernel_rem_pio2+0x3a6>
 800527a:	4290      	cmp	r0, r2
 800527c:	daf4      	bge.n	8005268 <__kernel_rem_pio2+0x390>
 800527e:	aa40      	add	r2, sp, #256	; 0x100
 8005280:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005284:	ed82 7b00 	vstr	d7, [r2]
 8005288:	3901      	subs	r1, #1
 800528a:	3001      	adds	r0, #1
 800528c:	e72f      	b.n	80050ee <__kernel_rem_pio2+0x216>
 800528e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8005290:	2a02      	cmp	r2, #2
 8005292:	dc0a      	bgt.n	80052aa <__kernel_rem_pio2+0x3d2>
 8005294:	2a00      	cmp	r2, #0
 8005296:	dc5a      	bgt.n	800534e <__kernel_rem_pio2+0x476>
 8005298:	d039      	beq.n	800530e <__kernel_rem_pio2+0x436>
 800529a:	f008 0007 	and.w	r0, r8, #7
 800529e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80052a2:	ecbd 8b06 	vpop	{d8-d10}
 80052a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052aa:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80052ac:	2a03      	cmp	r2, #3
 80052ae:	d1f4      	bne.n	800529a <__kernel_rem_pio2+0x3c2>
 80052b0:	aa40      	add	r2, sp, #256	; 0x100
 80052b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f1a1 0108 	sub.w	r1, r1, #8
 80052c0:	dc52      	bgt.n	8005368 <__kernel_rem_pio2+0x490>
 80052c2:	4619      	mov	r1, r3
 80052c4:	2901      	cmp	r1, #1
 80052c6:	f1a2 0208 	sub.w	r2, r2, #8
 80052ca:	dc5d      	bgt.n	8005388 <__kernel_rem_pio2+0x4b0>
 80052cc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80053d0 <__kernel_rem_pio2+0x4f8>
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	dc69      	bgt.n	80053a8 <__kernel_rem_pio2+0x4d0>
 80052d4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80052d8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80052dc:	2d00      	cmp	r5, #0
 80052de:	d16c      	bne.n	80053ba <__kernel_rem_pio2+0x4e2>
 80052e0:	ed87 5b00 	vstr	d5, [r7]
 80052e4:	ed87 6b02 	vstr	d6, [r7, #8]
 80052e8:	ed87 7b04 	vstr	d7, [r7, #16]
 80052ec:	e7d5      	b.n	800529a <__kernel_rem_pio2+0x3c2>
 80052ee:	aa40      	add	r2, sp, #256	; 0x100
 80052f0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80052f4:	ed92 6b00 	vldr	d6, [r2]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052fe:	2b00      	cmp	r3, #0
 8005300:	daf5      	bge.n	80052ee <__kernel_rem_pio2+0x416>
 8005302:	b10d      	cbz	r5, 8005308 <__kernel_rem_pio2+0x430>
 8005304:	eeb1 7b47 	vneg.f64	d7, d7
 8005308:	ed87 7b00 	vstr	d7, [r7]
 800530c:	e7c5      	b.n	800529a <__kernel_rem_pio2+0x3c2>
 800530e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80053d0 <__kernel_rem_pio2+0x4f8>
 8005312:	e7f4      	b.n	80052fe <__kernel_rem_pio2+0x426>
 8005314:	a940      	add	r1, sp, #256	; 0x100
 8005316:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800531a:	ed91 7b00 	vldr	d7, [r1]
 800531e:	3a01      	subs	r2, #1
 8005320:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005324:	2a00      	cmp	r2, #0
 8005326:	daf5      	bge.n	8005314 <__kernel_rem_pio2+0x43c>
 8005328:	b1ad      	cbz	r5, 8005356 <__kernel_rem_pio2+0x47e>
 800532a:	eeb1 7b46 	vneg.f64	d7, d6
 800532e:	ed87 7b00 	vstr	d7, [r7]
 8005332:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8005336:	a942      	add	r1, sp, #264	; 0x108
 8005338:	2201      	movs	r2, #1
 800533a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800533e:	4293      	cmp	r3, r2
 8005340:	da0c      	bge.n	800535c <__kernel_rem_pio2+0x484>
 8005342:	b10d      	cbz	r5, 8005348 <__kernel_rem_pio2+0x470>
 8005344:	eeb1 7b47 	vneg.f64	d7, d7
 8005348:	ed87 7b02 	vstr	d7, [r7, #8]
 800534c:	e7a5      	b.n	800529a <__kernel_rem_pio2+0x3c2>
 800534e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80053d0 <__kernel_rem_pio2+0x4f8>
 8005352:	461a      	mov	r2, r3
 8005354:	e7e6      	b.n	8005324 <__kernel_rem_pio2+0x44c>
 8005356:	eeb0 7b46 	vmov.f64	d7, d6
 800535a:	e7e8      	b.n	800532e <__kernel_rem_pio2+0x456>
 800535c:	ecb1 6b02 	vldmia	r1!, {d6}
 8005360:	3201      	adds	r2, #1
 8005362:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005366:	e7ea      	b.n	800533e <__kernel_rem_pio2+0x466>
 8005368:	ed91 7b00 	vldr	d7, [r1]
 800536c:	ed91 5b02 	vldr	d5, [r1, #8]
 8005370:	3801      	subs	r0, #1
 8005372:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005376:	ee37 7b46 	vsub.f64	d7, d7, d6
 800537a:	ed81 6b00 	vstr	d6, [r1]
 800537e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005382:	ed81 7b02 	vstr	d7, [r1, #8]
 8005386:	e798      	b.n	80052ba <__kernel_rem_pio2+0x3e2>
 8005388:	ed92 7b00 	vldr	d7, [r2]
 800538c:	ed92 5b02 	vldr	d5, [r2, #8]
 8005390:	3901      	subs	r1, #1
 8005392:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005396:	ee37 7b46 	vsub.f64	d7, d7, d6
 800539a:	ed82 6b00 	vstr	d6, [r2]
 800539e:	ee37 7b05 	vadd.f64	d7, d7, d5
 80053a2:	ed82 7b02 	vstr	d7, [r2, #8]
 80053a6:	e78d      	b.n	80052c4 <__kernel_rem_pio2+0x3ec>
 80053a8:	aa40      	add	r2, sp, #256	; 0x100
 80053aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80053ae:	ed92 6b00 	vldr	d6, [r2]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053b8:	e78a      	b.n	80052d0 <__kernel_rem_pio2+0x3f8>
 80053ba:	eeb1 5b45 	vneg.f64	d5, d5
 80053be:	eeb1 6b46 	vneg.f64	d6, d6
 80053c2:	ed87 5b00 	vstr	d5, [r7]
 80053c6:	eeb1 7b47 	vneg.f64	d7, d7
 80053ca:	ed87 6b02 	vstr	d6, [r7, #8]
 80053ce:	e78b      	b.n	80052e8 <__kernel_rem_pio2+0x410>
	...

080053d8 <__kernel_sin>:
 80053d8:	ee10 3a90 	vmov	r3, s1
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80053e4:	da04      	bge.n	80053f0 <__kernel_sin+0x18>
 80053e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80053ea:	ee17 3a90 	vmov	r3, s15
 80053ee:	b35b      	cbz	r3, 8005448 <__kernel_sin+0x70>
 80053f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80053f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80053f8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8005450 <__kernel_sin+0x78>
 80053fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005458 <__kernel_sin+0x80>
 8005400:	eea6 4b07 	vfma.f64	d4, d6, d7
 8005404:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005460 <__kernel_sin+0x88>
 8005408:	eea4 7b06 	vfma.f64	d7, d4, d6
 800540c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005468 <__kernel_sin+0x90>
 8005410:	eea7 4b06 	vfma.f64	d4, d7, d6
 8005414:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005470 <__kernel_sin+0x98>
 8005418:	eea4 7b06 	vfma.f64	d7, d4, d6
 800541c:	b930      	cbnz	r0, 800542c <__kernel_sin+0x54>
 800541e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005478 <__kernel_sin+0xa0>
 8005422:	eea6 4b07 	vfma.f64	d4, d6, d7
 8005426:	eea4 0b05 	vfma.f64	d0, d4, d5
 800542a:	4770      	bx	lr
 800542c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8005430:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005434:	eea1 7b04 	vfma.f64	d7, d1, d4
 8005438:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800543c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005480 <__kernel_sin+0xa8>
 8005440:	eea5 1b07 	vfma.f64	d1, d5, d7
 8005444:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w
 8005450:	5acfd57c 	.word	0x5acfd57c
 8005454:	3de5d93a 	.word	0x3de5d93a
 8005458:	8a2b9ceb 	.word	0x8a2b9ceb
 800545c:	be5ae5e6 	.word	0xbe5ae5e6
 8005460:	57b1fe7d 	.word	0x57b1fe7d
 8005464:	3ec71de3 	.word	0x3ec71de3
 8005468:	19c161d5 	.word	0x19c161d5
 800546c:	bf2a01a0 	.word	0xbf2a01a0
 8005470:	1110f8a6 	.word	0x1110f8a6
 8005474:	3f811111 	.word	0x3f811111
 8005478:	55555549 	.word	0x55555549
 800547c:	bfc55555 	.word	0xbfc55555
 8005480:	55555549 	.word	0x55555549
 8005484:	3fc55555 	.word	0x3fc55555

08005488 <fabs>:
 8005488:	ec51 0b10 	vmov	r0, r1, d0
 800548c:	ee10 2a10 	vmov	r2, s0
 8005490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005494:	ec43 2b10 	vmov	d0, r2, r3
 8005498:	4770      	bx	lr
 800549a:	0000      	movs	r0, r0
 800549c:	0000      	movs	r0, r0
	...

080054a0 <floor>:
 80054a0:	ee10 1a90 	vmov	r1, s1
 80054a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80054a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80054ac:	2b13      	cmp	r3, #19
 80054ae:	b530      	push	{r4, r5, lr}
 80054b0:	ee10 0a10 	vmov	r0, s0
 80054b4:	ee10 5a10 	vmov	r5, s0
 80054b8:	dc31      	bgt.n	800551e <floor+0x7e>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da15      	bge.n	80054ea <floor+0x4a>
 80054be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005578 <floor+0xd8>
 80054c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80054c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80054ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ce:	dd07      	ble.n	80054e0 <floor+0x40>
 80054d0:	2900      	cmp	r1, #0
 80054d2:	da4e      	bge.n	8005572 <floor+0xd2>
 80054d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054d8:	4318      	orrs	r0, r3
 80054da:	d001      	beq.n	80054e0 <floor+0x40>
 80054dc:	4928      	ldr	r1, [pc, #160]	; (8005580 <floor+0xe0>)
 80054de:	2000      	movs	r0, #0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4602      	mov	r2, r0
 80054e4:	ec43 2b10 	vmov	d0, r2, r3
 80054e8:	e020      	b.n	800552c <floor+0x8c>
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <floor+0xe4>)
 80054ec:	411a      	asrs	r2, r3
 80054ee:	ea01 0402 	and.w	r4, r1, r2
 80054f2:	4304      	orrs	r4, r0
 80054f4:	d01a      	beq.n	800552c <floor+0x8c>
 80054f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005578 <floor+0xd8>
 80054fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80054fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	ddeb      	ble.n	80054e0 <floor+0x40>
 8005508:	2900      	cmp	r1, #0
 800550a:	bfbe      	ittt	lt
 800550c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8005510:	fa40 f303 	asrlt.w	r3, r0, r3
 8005514:	18c9      	addlt	r1, r1, r3
 8005516:	ea21 0102 	bic.w	r1, r1, r2
 800551a:	2000      	movs	r0, #0
 800551c:	e7e0      	b.n	80054e0 <floor+0x40>
 800551e:	2b33      	cmp	r3, #51	; 0x33
 8005520:	dd05      	ble.n	800552e <floor+0x8e>
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005526:	d101      	bne.n	800552c <floor+0x8c>
 8005528:	ee30 0b00 	vadd.f64	d0, d0, d0
 800552c:	bd30      	pop	{r4, r5, pc}
 800552e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8005532:	f04f 32ff 	mov.w	r2, #4294967295
 8005536:	40e2      	lsrs	r2, r4
 8005538:	4202      	tst	r2, r0
 800553a:	d0f7      	beq.n	800552c <floor+0x8c>
 800553c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8005578 <floor+0xd8>
 8005540:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005544:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	ddc8      	ble.n	80054e0 <floor+0x40>
 800554e:	2900      	cmp	r1, #0
 8005550:	da02      	bge.n	8005558 <floor+0xb8>
 8005552:	2b14      	cmp	r3, #20
 8005554:	d103      	bne.n	800555e <floor+0xbe>
 8005556:	3101      	adds	r1, #1
 8005558:	ea20 0002 	bic.w	r0, r0, r2
 800555c:	e7c0      	b.n	80054e0 <floor+0x40>
 800555e:	2401      	movs	r4, #1
 8005560:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005564:	fa04 f303 	lsl.w	r3, r4, r3
 8005568:	4418      	add	r0, r3
 800556a:	42a8      	cmp	r0, r5
 800556c:	bf38      	it	cc
 800556e:	1909      	addcc	r1, r1, r4
 8005570:	e7f2      	b.n	8005558 <floor+0xb8>
 8005572:	2000      	movs	r0, #0
 8005574:	4601      	mov	r1, r0
 8005576:	e7b3      	b.n	80054e0 <floor+0x40>
 8005578:	8800759c 	.word	0x8800759c
 800557c:	7e37e43c 	.word	0x7e37e43c
 8005580:	bff00000 	.word	0xbff00000
 8005584:	000fffff 	.word	0x000fffff

08005588 <scalbn>:
 8005588:	b082      	sub	sp, #8
 800558a:	ed8d 0b00 	vstr	d0, [sp]
 800558e:	9b01      	ldr	r3, [sp, #4]
 8005590:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005594:	b9a2      	cbnz	r2, 80055c0 <scalbn+0x38>
 8005596:	9a00      	ldr	r2, [sp, #0]
 8005598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800559c:	4313      	orrs	r3, r2
 800559e:	d03a      	beq.n	8005616 <scalbn+0x8e>
 80055a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8005678 <scalbn+0xf0>
 80055a4:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <scalbn+0x120>)
 80055a6:	ee20 7b07 	vmul.f64	d7, d0, d7
 80055aa:	4298      	cmp	r0, r3
 80055ac:	ed8d 7b00 	vstr	d7, [sp]
 80055b0:	da11      	bge.n	80055d6 <scalbn+0x4e>
 80055b2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8005680 <scalbn+0xf8>
 80055b6:	ed9d 6b00 	vldr	d6, [sp]
 80055ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055be:	e007      	b.n	80055d0 <scalbn+0x48>
 80055c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80055c4:	428a      	cmp	r2, r1
 80055c6:	d10a      	bne.n	80055de <scalbn+0x56>
 80055c8:	ed9d 7b00 	vldr	d7, [sp]
 80055cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80055d0:	ed8d 7b00 	vstr	d7, [sp]
 80055d4:	e01f      	b.n	8005616 <scalbn+0x8e>
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80055dc:	3a36      	subs	r2, #54	; 0x36
 80055de:	4402      	add	r2, r0
 80055e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80055e4:	428a      	cmp	r2, r1
 80055e6:	dd0a      	ble.n	80055fe <scalbn+0x76>
 80055e8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8005688 <scalbn+0x100>
 80055ec:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8005690 <scalbn+0x108>
 80055f0:	eeb0 6b47 	vmov.f64	d6, d7
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80055fc:	e7dd      	b.n	80055ba <scalbn+0x32>
 80055fe:	2a00      	cmp	r2, #0
 8005600:	dd0d      	ble.n	800561e <scalbn+0x96>
 8005602:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005606:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800560a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800560e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005612:	e9cd 0100 	strd	r0, r1, [sp]
 8005616:	ed9d 0b00 	vldr	d0, [sp]
 800561a:	b002      	add	sp, #8
 800561c:	4770      	bx	lr
 800561e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005622:	da18      	bge.n	8005656 <scalbn+0xce>
 8005624:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005628:	4298      	cmp	r0, r3
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005630:	dd09      	ble.n	8005646 <scalbn+0xbe>
 8005632:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8005688 <scalbn+0x100>
 8005636:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8005690 <scalbn+0x108>
 800563a:	eeb0 6b47 	vmov.f64	d6, d7
 800563e:	2b00      	cmp	r3, #0
 8005640:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8005644:	e7b9      	b.n	80055ba <scalbn+0x32>
 8005646:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8005680 <scalbn+0xf8>
 800564a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8005698 <scalbn+0x110>
 800564e:	eeb0 6b47 	vmov.f64	d6, d7
 8005652:	2b00      	cmp	r3, #0
 8005654:	e7f4      	b.n	8005640 <scalbn+0xb8>
 8005656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800565a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800565e:	3236      	adds	r2, #54	; 0x36
 8005660:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005664:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005668:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80056a0 <scalbn+0x118>
 800566c:	ec41 0b17 	vmov	d7, r0, r1
 8005670:	e7a3      	b.n	80055ba <scalbn+0x32>
 8005672:	bf00      	nop
 8005674:	f3af 8000 	nop.w
 8005678:	00000000 	.word	0x00000000
 800567c:	43500000 	.word	0x43500000
 8005680:	c2f8f359 	.word	0xc2f8f359
 8005684:	01a56e1f 	.word	0x01a56e1f
 8005688:	8800759c 	.word	0x8800759c
 800568c:	7e37e43c 	.word	0x7e37e43c
 8005690:	8800759c 	.word	0x8800759c
 8005694:	fe37e43c 	.word	0xfe37e43c
 8005698:	c2f8f359 	.word	0xc2f8f359
 800569c:	81a56e1f 	.word	0x81a56e1f
 80056a0:	00000000 	.word	0x00000000
 80056a4:	3c900000 	.word	0x3c900000
 80056a8:	ffff3cb0 	.word	0xffff3cb0

080056ac <_init>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	bf00      	nop
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr

080056b8 <_fini>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr
